
Practica_2_SETR1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e20  08005e20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e28  08005e28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  2000000c  08005e3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  08005e3c  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a14  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003746  00000000  00000000  00039a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  0003d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012f6  00000000  00000000  0003ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029697  00000000  00000000  0003fd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c546  00000000  00000000  000693fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa660  00000000  00000000  00085943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006918  00000000  00000000  0017ffa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001868bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005db4 	.word	0x08005db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005db4 	.word	0x08005db4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	619a      	str	r2, [r3, #24]
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
    // Pulse clock
    LL_GPIO_SetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f7ff ffdc 	bl	80004c4 <LL_GPIO_SetOutputPin>
    LL_mDelay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f005 fbfd 	bl	8005d0c <LL_mDelay>
    LL_GPIO_ResetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051a:	f7ff ffe1 	bl	80004e0 <LL_GPIO_ResetOutputPin>
     //LL_mDelay(1);
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_reset>:

void lcd_reset(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
    LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 8000528:	2104      	movs	r1, #4
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <lcd_reset+0x64>)
 800052c:	f7ff ffd8 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT7,  LCD_7);
 8000530:	2110      	movs	r1, #16
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f7ff ffd3 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT4,  LCD_4);
 800053a:	2108      	movs	r1, #8
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f7ff ffce 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT56,  LCD_5 | LCD_6);
 8000544:	2112      	movs	r1, #18
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <lcd_reset+0x64>)
 8000548:	f7ff ffca 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(CLOCK_PORT,  LCD_CLOCK );
 800054c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f7ff ffc4 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
    LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4 );
 8000558:	2108      	movs	r1, #8
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f7ff ffb1 	bl	80004c4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5 );
 8000562:	2110      	movs	r1, #16
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <lcd_reset+0x64>)
 8000566:	f7ff ffad 	bl	80004c4 <LL_GPIO_SetOutputPin>
    lcd_clock();
 800056a:	f7ff ffc7 	bl	80004fc <lcd_clock>
    lcd_clock();
 800056e:	f7ff ffc5 	bl	80004fc <lcd_clock>
    lcd_clock();
 8000572:	f7ff ffc3 	bl	80004fc <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 8000576:	2108      	movs	r1, #8
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f7ff ffb0 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    lcd_clock();
 8000580:	f7ff ffbc 	bl	80004fc <lcd_clock>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	48000400 	.word	0x48000400

0800058c <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <lcd_write+0x2a>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 80005aa:	2108      	movs	r1, #8
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f7ff ff88 	bl	80004c4 <LL_GPIO_SetOutputPin>
 80005b4:	e004      	b.n	80005c0 <lcd_write+0x34>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 80005b6:	2108      	movs	r1, #8
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f7ff ff90 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 5 ) & 1)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	095b      	lsrs	r3, r3, #5
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d004      	beq.n	80005d8 <lcd_write+0x4c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 80005ce:	2110      	movs	r1, #16
 80005d0:	483f      	ldr	r0, [pc, #252]	; (80006d0 <lcd_write+0x144>)
 80005d2:	f7ff ff77 	bl	80004c4 <LL_GPIO_SetOutputPin>
 80005d6:	e003      	b.n	80005e0 <lcd_write+0x54>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 80005d8:	2110      	movs	r1, #16
 80005da:	483d      	ldr	r0, [pc, #244]	; (80006d0 <lcd_write+0x144>)
 80005dc:	f7ff ff80 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 6 ) & 1)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	099b      	lsrs	r3, r3, #6
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <lcd_write+0x6c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 80005ee:	2102      	movs	r1, #2
 80005f0:	4837      	ldr	r0, [pc, #220]	; (80006d0 <lcd_write+0x144>)
 80005f2:	f7ff ff67 	bl	80004c4 <LL_GPIO_SetOutputPin>
 80005f6:	e003      	b.n	8000600 <lcd_write+0x74>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 80005f8:	2102      	movs	r1, #2
 80005fa:	4835      	ldr	r0, [pc, #212]	; (80006d0 <lcd_write+0x144>)
 80005fc:	f7ff ff70 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 7 ) & 1)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	09db      	lsrs	r3, r3, #7
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <lcd_write+0x8e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 800060e:	2110      	movs	r1, #16
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f7ff ff56 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000618:	e004      	b.n	8000624 <lcd_write+0x98>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 800061a:	2110      	movs	r1, #16
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f7ff ff5e 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if(rs)
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d004      	beq.n	8000634 <lcd_write+0xa8>
        LL_GPIO_SetOutputPin(RS_PORT, LCD_RS);
 800062a:	2104      	movs	r1, #4
 800062c:	4828      	ldr	r0, [pc, #160]	; (80006d0 <lcd_write+0x144>)
 800062e:	f7ff ff49 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000632:	e003      	b.n	800063c <lcd_write+0xb0>
    else
        LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 8000634:	2104      	movs	r1, #4
 8000636:	4826      	ldr	r0, [pc, #152]	; (80006d0 <lcd_write+0x144>)
 8000638:	f7ff ff52 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 800063c:	f7ff ff5e 	bl	80004fc <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <lcd_write+0xca>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800064a:	2108      	movs	r1, #8
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f7ff ff38 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000654:	e004      	b.n	8000660 <lcd_write+0xd4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 8000656:	2108      	movs	r1, #8
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f7ff ff40 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 1 ) & 1)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	085b      	lsrs	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	2b00      	cmp	r3, #0
 800066c:	d004      	beq.n	8000678 <lcd_write+0xec>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 800066e:	2110      	movs	r1, #16
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <lcd_write+0x144>)
 8000672:	f7ff ff27 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000676:	e003      	b.n	8000680 <lcd_write+0xf4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 8000678:	2110      	movs	r1, #16
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <lcd_write+0x144>)
 800067c:	f7ff ff30 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 2 ) & 1)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d004      	beq.n	8000698 <lcd_write+0x10c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 800068e:	2102      	movs	r1, #2
 8000690:	480f      	ldr	r0, [pc, #60]	; (80006d0 <lcd_write+0x144>)
 8000692:	f7ff ff17 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000696:	e003      	b.n	80006a0 <lcd_write+0x114>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 8000698:	2102      	movs	r1, #2
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <lcd_write+0x144>)
 800069c:	f7ff ff20 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 3 ) & 1)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d005      	beq.n	80006ba <lcd_write+0x12e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 80006ae:	2110      	movs	r1, #16
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f7ff ff06 	bl	80004c4 <LL_GPIO_SetOutputPin>
 80006b8:	e004      	b.n	80006c4 <lcd_write+0x138>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 80006ba:	2110      	movs	r1, #16
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f7ff ff0e 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 80006c4:	f7ff ff1a 	bl	80004fc <lcd_clock>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	48000400 	.word	0x48000400

080006d4 <lcd_clear>:

void lcd_clear(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006d8:	2100      	movs	r1, #0
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ff56 	bl	800058c <lcd_write>
    _lcd_char = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <lcd_clear+0x1c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <lcd_clear+0x20>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000030 	.word	0x20000030
 80006f4:	20000031 	.word	0x20000031

080006f8 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	460b      	mov	r3, r1
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	4613      	mov	r3, r2
 8000708:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	b25b      	sxtb	r3, r3
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b25a      	sxtb	r2, r3
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	b25b      	sxtb	r3, r3
 800071c:	4313      	orrs	r3, r2
 800071e:	b25a      	sxtb	r2, r3
 8000720:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000724:	4313      	orrs	r3, r2
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff2d 	bl	800058c <lcd_write>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff1c 	bl	800058c <lcd_write>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <lcd_cgram_address>:

void lcd_cgram_address(uint8_t address)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	lcd_write(0b01000000 | address, 0);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff0b 	bl	800058c <lcd_write>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <lcd_print>:

void lcd_print(char string[])
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
 800078c:	e055      	b.n	800083a <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 800078e:	4b30      	ldr	r3, [pc, #192]	; (8000850 <lcd_print+0xd0>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d01c      	beq.n	80007d0 <lcd_print+0x50>
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b0a      	cmp	r3, #10
 80007a0:	d116      	bne.n	80007d0 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <lcd_print+0xd4>)
 80007a4:	781a      	ldrb	r2, [r3, #0]
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <lcd_print+0xd0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d242      	bcs.n	8000834 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <lcd_print+0xd8>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <lcd_print+0xd4>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	1c59      	adds	r1, r3, #1
 80007b8:	b2c8      	uxtb	r0, r1
 80007ba:	4926      	ldr	r1, [pc, #152]	; (8000854 <lcd_print+0xd4>)
 80007bc:	7008      	strb	r0, [r1, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ffb9 	bl	800073a <lcd_display_address>
                _lcd_char = 0;
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <lcd_print+0xdc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80007ce:	e031      	b.n	8000834 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <lcd_print+0xe0>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d01b      	beq.n	8000810 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80007d8:	4b20      	ldr	r3, [pc, #128]	; (800085c <lcd_print+0xdc>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <lcd_print+0xe0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d115      	bne.n	8000810 <lcd_print+0x90>
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <lcd_print+0xd4>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <lcd_print+0xd0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d20f      	bcs.n	8000810 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <lcd_print+0xd8>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <lcd_print+0xd4>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	1c59      	adds	r1, r3, #1
 80007fa:	b2c8      	uxtb	r0, r1
 80007fc:	4915      	ldr	r1, [pc, #84]	; (8000854 <lcd_print+0xd4>)
 80007fe:	7008      	strb	r0, [r1, #0]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff98 	bl	800073a <lcd_display_address>
                    _lcd_char = 0;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <lcd_print+0xdc>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2101      	movs	r1, #1
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feb6 	bl	800058c <lcd_write>
            if(lcd_chars) _lcd_char++;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <lcd_print+0xe0>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d005      	beq.n	8000834 <lcd_print+0xb4>
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <lcd_print+0xdc>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <lcd_print+0xdc>)
 8000832:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	3301      	adds	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1a3      	bne.n	800078e <lcd_print+0xe>
        }
    }
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000029 	.word	0x20000029
 8000854:	20000031 	.word	0x20000031
 8000858:	2000002c 	.word	0x2000002c
 800085c:	20000030 	.word	0x20000030
 8000860:	20000028 	.word	0x20000028

08000864 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	011a      	lsls	r2, r3, #4
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	dc0a      	bgt.n	800089a <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	b25b      	sxtb	r3, r3
 8000888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800088c:	b25b      	sxtb	r3, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe7a 	bl	800058c <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 8000898:	e059      	b.n	800094e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	dd17      	ble.n	80008d0 <moveToXY+0x6c>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b1f      	cmp	r3, #31
 80008a4:	dc14      	bgt.n	80008d0 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	425a      	negs	r2, r3
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	f002 020f 	and.w	r2, r2, #15
 80008b2:	bf58      	it	pl
 80008b4:	4253      	negpl	r3, r2
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	3340      	adds	r3, #64	; 0x40
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe5f 	bl	800058c <lcd_write>
 80008ce:	e03e      	b.n	800094e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b28      	cmp	r3, #40	; 0x28
 80008d4:	dd1b      	ble.n	800090e <moveToXY+0xaa>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b3b      	cmp	r3, #59	; 0x3b
 80008da:	dc18      	bgt.n	800090e <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <moveToXY+0xf4>)
 80008e0:	fb83 1302 	smull	r1, r3, r3, r2
 80008e4:	1119      	asrs	r1, r3, #4
 80008e6:	17d3      	asrs	r3, r2, #31
 80008e8:	1ac9      	subs	r1, r1, r3
 80008ea:	460b      	mov	r3, r1
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	440b      	add	r3, r1
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	1ad1      	subs	r1, r2, r3
 80008f4:	b2cb      	uxtb	r3, r1
 80008f6:	3314      	adds	r3, #20
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000900:	b25b      	sxtb	r3, r3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe40 	bl	800058c <lcd_write>
 800090c:	e01f      	b.n	800094e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b13      	cmp	r3, #19
 8000912:	dd1c      	ble.n	800094e <moveToXY+0xea>
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b27      	cmp	r3, #39	; 0x27
 8000918:	dc19      	bgt.n	800094e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <moveToXY+0xf8>)
 800091e:	fb83 1302 	smull	r1, r3, r3, r2
 8000922:	4413      	add	r3, r2
 8000924:	1159      	asrs	r1, r3, #5
 8000926:	17d3      	asrs	r3, r2, #31
 8000928:	1ac9      	subs	r1, r1, r3
 800092a:	460b      	mov	r3, r1
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	1a5b      	subs	r3, r3, r1
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	1ad1      	subs	r1, r2, r3
 8000934:	b2cb      	uxtb	r3, r1
 8000936:	3354      	adds	r3, #84	; 0x54
 8000938:	b2db      	uxtb	r3, r3
 800093a:	b25b      	sxtb	r3, r3
 800093c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000940:	b25b      	sxtb	r3, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe20 	bl	800058c <lcd_write>
}
 800094c:	e7ff      	b.n	800094e <moveToXY+0xea>
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	66666667 	.word	0x66666667
 800095c:	88888889 	.word	0x88888889

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4907      	ldr	r1, [pc, #28]	; (80009b4 <__NVIC_EnableIRQ+0x38>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	; (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	; (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
         );
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	; 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <LL_SYSCFG_SetEXTISource+0x68>)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	3302      	adds	r3, #2
 8000a86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	0c1b      	lsrs	r3, r3, #16
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	ea02 0103 	and.w	r1, r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	fa93 f3a3 	rbit	r3, r3
 8000aa0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000aac:	2320      	movs	r3, #32
 8000aae:	e003      	b.n	8000ab8 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fab3 f383 	clz	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	fa03 f202 	lsl.w	r2, r3, r2
 8000ac0:	4806      	ldr	r0, [pc, #24]	; (8000adc <LL_SYSCFG_SetEXTISource+0x68>)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	3302      	adds	r3, #2
 8000aca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ace:	bf00      	nop
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40010000 	.word	0x40010000

08000ae0 <LL_GPIO_SetPinMode>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b08b      	sub	sp, #44	; 0x2c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa93 f3a3 	rbit	r3, r3
 8000afa:	613b      	str	r3, [r7, #16]
  return result;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000b06:	2320      	movs	r3, #32
 8000b08:	e003      	b.n	8000b12 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	fab3 f383 	clz	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2103      	movs	r1, #3
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	fa93 f3a3 	rbit	r3, r3
 8000b28:	61fb      	str	r3, [r7, #28]
  return result;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b34:	2320      	movs	r3, #32
 8000b36:	e003      	b.n	8000b40 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	601a      	str	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	372c      	adds	r7, #44	; 0x2c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_GPIO_SetPinPull>:
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b08b      	sub	sp, #44	; 0x2c
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa93 f3a3 	rbit	r3, r3
 8000b74:	613b      	str	r3, [r7, #16]
  return result;
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000b80:	2320      	movs	r3, #32
 8000b82:	e003      	b.n	8000b8c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fab3 f383 	clz	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2103      	movs	r1, #3
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	fa93 f3a3 	rbit	r3, r3
 8000ba2:	61fb      	str	r3, [r7, #28]
  return result;
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	e003      	b.n	8000bba <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	fab3 f383 	clz	r3, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	60da      	str	r2, [r3, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	372c      	adds	r7, #44	; 0x2c
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_GPIO_EnablePinAnalogControl>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <LL_GPIO_IsInputPinSet>:
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	4013      	ands	r3, r2
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d101      	bne.n	8000c12 <LL_GPIO_IsInputPinSet+0x1c>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <LL_GPIO_IsInputPinSet+0x1e>
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <LL_GPIO_SetOutputPin>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	619a      	str	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <LL_GPIO_ResetOutputPin>:
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4013      	ands	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	40021000 	.word	0x40021000

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f001 f93b 	bl	8001f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f8cc 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 fa94 	bl	80011c0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000c98:	f000 f92a 	bl	8000ef0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000c9c:	f000 f960 	bl	8000f60 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000ca0:	f000 f99c 	bl	8000fdc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ca4:	f000 f9c0 	bl	8001028 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000ca8:	f000 f9fc 	bl	80010a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000cac:	f000 fa2a 	bl	8001104 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cb0:	f000 fa58 	bl	8001164 <MX_USB_OTG_FS_PCD_Init>


  /* USER CODE BEGIN 2 */
  LL_GPIO_SetOutputPin(Led_LCD_GPIO_Port, Led_LCD_Pin);
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f7ff ffb1 	bl	8000c20 <LL_GPIO_SetOutputPin>
  lcd_reset();
 8000cbe:	f7ff fc31 	bl	8000524 <lcd_reset>
  lcd_display_settings(1,0,0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fd16 	bl	80006f8 <lcd_display_settings>
  lcd_clear();
 8000ccc:	f7ff fd02 	bl	80006d4 <lcd_clear>
  lcd_print("Hola mundo");
 8000cd0:	4851      	ldr	r0, [pc, #324]	; (8000e18 <main+0x190>)
 8000cd2:	f7ff fd55 	bl	8000780 <lcd_print>
  lcd_cgram_address(0); // se selecciona la dirección 0 de la CGRAM, patrón con código 0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fd40 	bl	800075c <lcd_cgram_address>
  lcd_write(0x15, 1); //se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2015      	movs	r0, #21
 8000ce0:	f7ff fc54 	bl	800058c <lcd_write>
  lcd_write(0x15, 1);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2015      	movs	r0, #21
 8000ce8:	f7ff fc50 	bl	800058c <lcd_write>
  lcd_write(0xe, 1);
 8000cec:	2101      	movs	r1, #1
 8000cee:	200e      	movs	r0, #14
 8000cf0:	f7ff fc4c 	bl	800058c <lcd_write>
  lcd_write(0x4, 1);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	2004      	movs	r0, #4
 8000cf8:	f7ff fc48 	bl	800058c <lcd_write>
  lcd_write(0x4, 1);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff fc44 	bl	800058c <lcd_write>
  lcd_write(0xa, 1);
 8000d04:	2101      	movs	r1, #1
 8000d06:	200a      	movs	r0, #10
 8000d08:	f7ff fc40 	bl	800058c <lcd_write>
  lcd_write(0x11, 1);
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2011      	movs	r0, #17
 8000d10:	f7ff fc3c 	bl	800058c <lcd_write>
  lcd_write(0x00, 1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fc38 	bl	800058c <lcd_write>
  lcd_cgram_address(8); //se selecciona la dirección 8 de la CGRAM, patrón con código 1
 8000d1c:	2008      	movs	r0, #8
 8000d1e:	f7ff fd1d 	bl	800075c <lcd_cgram_address>
  lcd_write(0x4, 1); // se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000d22:	2101      	movs	r1, #1
 8000d24:	2004      	movs	r0, #4
 8000d26:	f7ff fc31 	bl	800058c <lcd_write>
  lcd_write(0x4, 1);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2004      	movs	r0, #4
 8000d2e:	f7ff fc2d 	bl	800058c <lcd_write>
  lcd_write(0xe, 1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	200e      	movs	r0, #14
 8000d36:	f7ff fc29 	bl	800058c <lcd_write>
  lcd_write(0x15, 1);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	2015      	movs	r0, #21
 8000d3e:	f7ff fc25 	bl	800058c <lcd_write>
  lcd_write(0x15, 1);
 8000d42:	2101      	movs	r1, #1
 8000d44:	2015      	movs	r0, #21
 8000d46:	f7ff fc21 	bl	800058c <lcd_write>
  lcd_write(0xa, 1);
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f7ff fc1d 	bl	800058c <lcd_write>
  lcd_write(0xa, 1);
 8000d52:	2101      	movs	r1, #1
 8000d54:	200a      	movs	r0, #10
 8000d56:	f7ff fc19 	bl	800058c <lcd_write>
  lcd_write(0x00, 1);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fc15 	bl	800058c <lcd_write>
  lcd_display_address(0); //Vuelve a direccionar la DDRAM para visualizar datos en pantalla
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fce9 	bl	800073a <lcd_display_address>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  contador++;
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <main+0x194>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <main+0x194>)
 8000d70:	6013      	str	r3, [r2, #0]
	  if(contador == 10 && estado_mu == 0){
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <main+0x194>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d119      	bne.n	8000dae <main+0x126>
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <main+0x198>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d115      	bne.n	8000dae <main+0x126>
	  moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000d82:	2107      	movs	r1, #7
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff fd6d 	bl	8000864 <moveToXY>
	  lcd_write(0,1); //escribe el nuevo patrón 0 en la DDRAM
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fbfd 	bl	800058c <lcd_write>
	  moveToXY(1,8); //sitúa el cursor en la posición fila 1 columna 7, segundo muñeco
 8000d92:	2108      	movs	r1, #8
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff fd65 	bl	8000864 <moveToXY>
	  lcd_write(0,1);
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fbf5 	bl	800058c <lcd_write>
	  contador = 0;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <main+0x194>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
	  estado_mu = 1;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <main+0x198>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
	  }
	  //HAL_Delay(1000); //retraso de 1 segundo para dejar ver la figura en pantalla
	  if(contador == 10 && estado_mu == 1){
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <main+0x194>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d119      	bne.n	8000dea <main+0x162>
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <main+0x198>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d115      	bne.n	8000dea <main+0x162>
	  moveToXY(1,7);
 8000dbe:	2107      	movs	r1, #7
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fd4f 	bl	8000864 <moveToXY>
	  lcd_write(1,1); //escribe el nuevo patrón 0 en la DDRAM
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff fbdf 	bl	800058c <lcd_write>
	  moveToXY(1,8);
 8000dce:	2108      	movs	r1, #8
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff fd47 	bl	8000864 <moveToXY>
	  lcd_write(1,1);
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff fbd7 	bl	800058c <lcd_write>
	  contador = 0;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <main+0x194>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
	  estado_mu = 0;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <main+0x198>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
	  //HAL_Delay(1000);
	  }


	  if (LL_GPIO_IsInputPinSet(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin))
 8000dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <main+0x19c>)
 8000df0:	f7ff ff01 	bl	8000bf6 <LL_GPIO_IsInputPinSet>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d005      	beq.n	8000e06 <main+0x17e>
	  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <main+0x1a0>)
 8000e00:	f7ff ff0e 	bl	8000c20 <LL_GPIO_SetOutputPin>
 8000e04:	e004      	b.n	8000e10 <main+0x188>
	  else
	  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000e06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0a:	4807      	ldr	r0, [pc, #28]	; (8000e28 <main+0x1a0>)
 8000e0c:	f7ff ff16 	bl	8000c3c <LL_GPIO_ResetOutputPin>

	  HAL_Delay(100);
 8000e10:	2064      	movs	r0, #100	; 0x64
 8000e12:	f001 f8ed 	bl	8001ff0 <HAL_Delay>
	  contador++;
 8000e16:	e7a7      	b.n	8000d68 <main+0xe0>
 8000e18:	08005dcc 	.word	0x08005dcc
 8000e1c:	20000784 	.word	0x20000784
 8000e20:	20000788 	.word	0x20000788
 8000e24:	48000800 	.word	0x48000800
 8000e28:	48000400 	.word	0x48000400

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	; 0x58
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2244      	movs	r2, #68	; 0x44
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 ff8e 	bl	8005d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e52:	f001 ff25 	bl	8002ca0 <HAL_PWREx_ControlVoltageScaling>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e5c:	f000 fcae 	bl	80017bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e60:	f001 ff00 	bl	8002c64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <SystemClock_Config+0xc0>)
 8000e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <SystemClock_Config+0xc0>)
 8000e6c:	f023 0318 	bic.w	r3, r3, #24
 8000e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e74:	2314      	movs	r3, #20
 8000e76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e84:	2360      	movs	r3, #96	; 0x60
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e94:	2328      	movs	r3, #40	; 0x28
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 f81b 	bl	8002ee4 <HAL_RCC_OscConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 fc82 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb8:	230f      	movs	r3, #15
 8000eba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 fbe3 	bl	800369c <HAL_RCC_ClockConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000edc:	f000 fc6e 	bl	80017bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ee0:	f003 f8ea 	bl	80040b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ee4:	bf00      	nop
 8000ee6:	3758      	adds	r7, #88	; 0x58
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <MX_DFSDM1_Init+0x6c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f28:	2204      	movs	r2, #4
 8000f2a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_DFSDM1_Init+0x68>)
 8000f46:	f001 f95d 	bl	8002204 <HAL_DFSDM_ChannelInit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000f50:	f000 fc34 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000034 	.word	0x20000034
 8000f5c:	40016020 	.word	0x40016020

08000f60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x78>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f6c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000f70:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000f9e:	f001 fbe7 	bl	8002770 <HAL_I2C_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fa8:	f000 fc08 	bl	80017bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000fb0:	f001 fc79 	bl	80028a6 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000fba:	f000 fbff 	bl	80017bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_I2C2_Init+0x74>)
 8000fc2:	f001 fcbb 	bl	800293c <HAL_I2CEx_ConfigDigitalFilter>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000fcc:	f000 fbf6 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000006c 	.word	0x2000006c
 8000fd8:	40005800 	.word	0x40005800

08000fdc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_QUADSPI_Init+0x44>)
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <MX_QUADSPI_Init+0x48>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_QUADSPI_Init+0x44>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_QUADSPI_Init+0x44>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_QUADSPI_Init+0x44>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_QUADSPI_Init+0x44>)
 8000ffa:	2217      	movs	r2, #23
 8000ffc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_QUADSPI_Init+0x44>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_QUADSPI_Init+0x44>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_QUADSPI_Init+0x44>)
 800100c:	f001 feae 	bl	8002d6c <HAL_QSPI_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001016:	f000 fbd1 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000c0 	.word	0x200000c0
 8001024:	a0001000 	.word	0xa0001000

08001028 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_SPI3_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_SPI3_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_SPI3_Init+0x74>)
 8001034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001038:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_SPI3_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_SPI3_Init+0x74>)
 8001042:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001046:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_SPI3_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_SPI3_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_SPI3_Init+0x74>)
 8001056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_SPI3_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_SPI3_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_SPI3_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_SPI3_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_SPI3_Init+0x74>)
 8001076:	2207      	movs	r2, #7
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_SPI3_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_SPI3_Init+0x74>)
 8001082:	2208      	movs	r2, #8
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_SPI3_Init+0x74>)
 8001088:	f003 f9f8 	bl	800447c <HAL_SPI_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001092:	f000 fb93 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000104 	.word	0x20000104
 80010a0:	40003c00 	.word	0x40003c00

080010a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <MX_USART1_UART_Init+0x5c>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART1_UART_Init+0x58>)
 80010e8:	f003 fa6b 	bl	80045c2 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010f2:	f000 fb63 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000168 	.word	0x20000168
 8001100:	40013800 	.word	0x40013800

08001104 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_USART3_UART_Init+0x58>)
 800110a:	4a15      	ldr	r2, [pc, #84]	; (8001160 <MX_USART3_UART_Init+0x5c>)
 800110c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_USART3_UART_Init+0x58>)
 8001110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001114:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USART3_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_USART3_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USART3_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_USART3_UART_Init+0x58>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USART3_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_USART3_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_USART3_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_USART3_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_USART3_UART_Init+0x58>)
 8001148:	f003 fa3b 	bl	80045c2 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001152:	f000 fb33 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001f0 	.word	0x200001f0
 8001160:	40004800 	.word	0x40004800

08001164 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800116e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001172:	2206      	movs	r2, #6
 8001174:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001178:	2202      	movs	r2, #2
 800117a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117e:	2202      	movs	r2, #2
 8001180:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a8:	f001 fc14 	bl	80029d4 <HAL_PCD_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011b2:	f000 fb03 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000278 	.word	0x20000278

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80011e2:	2010      	movs	r0, #16
 80011e4:	f7ff fd38 	bl	8000c58 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80011e8:	2004      	movs	r0, #4
 80011ea:	f7ff fd35 	bl	8000c58 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fd32 	bl	8000c58 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff fd2f 	bl	8000c58 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80011fa:	2008      	movs	r0, #8
 80011fc:	f7ff fd2c 	bl	8000c58 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 8001200:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001204:	48cd      	ldr	r0, [pc, #820]	; (800153c <MX_GPIO_Init+0x37c>)
 8001206:	f7ff fd19 	bl	8000c3c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 800120a:	f248 111c 	movw	r1, #33052	; 0x811c
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f7ff fd13 	bl	8000c3c <LL_GPIO_ResetOutputPin>
                          |E_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001216:	f24f 0116 	movw	r1, #61462	; 0xf016
 800121a:	48c9      	ldr	r0, [pc, #804]	; (8001540 <MX_GPIO_Init+0x380>)
 800121c:	f7ff fd0e 	bl	8000c3c <LL_GPIO_ResetOutputPin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8001220:	f241 0181 	movw	r1, #4225	; 0x1081
 8001224:	48c7      	ldr	r0, [pc, #796]	; (8001544 <MX_GPIO_Init+0x384>)
 8001226:	f7ff fd09 	bl	8000c3c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 800122a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800122e:	48c6      	ldr	r0, [pc, #792]	; (8001548 <MX_GPIO_Init+0x388>)
 8001230:	f7ff fd04 	bl	8000c3c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 8001234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001238:	48c2      	ldr	r0, [pc, #776]	; (8001544 <MX_GPIO_Init+0x384>)
 800123a:	f7ff fcf1 	bl	8000c20 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 800123e:	2120      	movs	r1, #32
 8001240:	48bf      	ldr	r0, [pc, #764]	; (8001540 <MX_GPIO_Init+0x380>)
 8001242:	f7ff fced 	bl	8000c20 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 8001246:	2101      	movs	r1, #1
 8001248:	48bc      	ldr	r0, [pc, #752]	; (800153c <MX_GPIO_Init+0x37c>)
 800124a:	f7ff fce9 	bl	8000c20 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800124e:	f240 1315 	movw	r3, #277	; 0x115
 8001252:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001254:	2301      	movs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	48b4      	ldr	r0, [pc, #720]	; (800153c <MX_GPIO_Init+0x37c>)
 800126a:	f004 fa36 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800126e:	233f      	movs	r3, #63	; 0x3f
 8001270:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	48b2      	ldr	r0, [pc, #712]	; (8001548 <MX_GPIO_Init+0x388>)
 8001280:	f004 fa2b 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001284:	2303      	movs	r3, #3
 8001286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001288:	2302      	movs	r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001298:	2308      	movs	r3, #8
 800129a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f004 fa19 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 80012a8:	f248 131c 	movw	r3, #33052	; 0x811c
 80012ac:	607b      	str	r3, [r7, #4]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ae:	2301      	movs	r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f004 fa08 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80012ca:	23e0      	movs	r3, #224	; 0xe0
 80012cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012ce:	2302      	movs	r3, #2
 80012d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80012de:	2305      	movs	r3, #5
 80012e0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f004 f9f6 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 80012ee:	f24f 0336 	movw	r3, #61494	; 0xf036
 80012f2:	607b      	str	r3, [r7, #4]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012f4:	2301      	movs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	488d      	ldr	r0, [pc, #564]	; (8001540 <MX_GPIO_Init+0x380>)
 800130a:	f004 f9e6 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800130e:	f243 0381 	movw	r3, #12417	; 0x3081
 8001312:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001314:	2301      	movs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4886      	ldr	r0, [pc, #536]	; (8001544 <MX_GPIO_Init+0x384>)
 800132a:	f004 f9d6 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800132e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001332:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001334:	2301      	movs	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4619      	mov	r1, r3
 8001348:	487f      	ldr	r0, [pc, #508]	; (8001548 <MX_GPIO_Init+0x388>)
 800134a:	f004 f9c6 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800134e:	2302      	movs	r3, #2
 8001350:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001352:	2302      	movs	r3, #2
 8001354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001362:	2305      	movs	r3, #5
 8001364:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4876      	ldr	r0, [pc, #472]	; (8001544 <MX_GPIO_Init+0x384>)
 800136c:	f004 f9b5 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001370:	2378      	movs	r3, #120	; 0x78
 8001372:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001374:	2302      	movs	r3, #2
 8001376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001384:	2307      	movs	r3, #7
 8001386:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	486d      	ldr	r0, [pc, #436]	; (8001544 <MX_GPIO_Init+0x384>)
 800138e:	f004 f9a4 	bl	80056da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001392:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001396:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001398:	2302      	movs	r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80013a0:	2301      	movs	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4863      	ldr	r0, [pc, #396]	; (8001540 <MX_GPIO_Init+0x380>)
 80013b2:	f004 f992 	bl	80056da <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 80013b6:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80013ba:	2004      	movs	r0, #4
 80013bc:	f7ff fb5a 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 80013c0:	4962      	ldr	r1, [pc, #392]	; (800154c <MX_GPIO_Init+0x38c>)
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff fb56 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 80013c8:	4961      	ldr	r1, [pc, #388]	; (8001550 <MX_GPIO_Init+0x390>)
 80013ca:	2004      	movs	r0, #4
 80013cc:	f7ff fb52 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80013d0:	4960      	ldr	r1, [pc, #384]	; (8001554 <MX_GPIO_Init+0x394>)
 80013d2:	2002      	movs	r0, #2
 80013d4:	f7ff fb4e 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 80013d8:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff fb49 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 80013e2:	495d      	ldr	r1, [pc, #372]	; (8001558 <MX_GPIO_Init+0x398>)
 80013e4:	2003      	movs	r0, #3
 80013e6:	f7ff fb45 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 80013ea:	495c      	ldr	r1, [pc, #368]	; (800155c <MX_GPIO_Init+0x39c>)
 80013ec:	2003      	movs	r0, #3
 80013ee:	f7ff fb41 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 80013f2:	495b      	ldr	r1, [pc, #364]	; (8001560 <MX_GPIO_Init+0x3a0>)
 80013f4:	2003      	movs	r0, #3
 80013f6:	f7ff fb3d 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 80013fa:	495a      	ldr	r1, [pc, #360]	; (8001564 <MX_GPIO_Init+0x3a4>)
 80013fc:	2003      	movs	r0, #3
 80013fe:	f7ff fb39 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 8001402:	4959      	ldr	r1, [pc, #356]	; (8001568 <MX_GPIO_Init+0x3a8>)
 8001404:	2002      	movs	r0, #2
 8001406:	f7ff fb35 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 800140a:	4958      	ldr	r1, [pc, #352]	; (800156c <MX_GPIO_Init+0x3ac>)
 800140c:	2002      	movs	r0, #2
 800140e:	f7ff fb31 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 8001412:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001416:	2003      	movs	r0, #3
 8001418:	f7ff fb2c 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 800141c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001420:	2004      	movs	r0, #4
 8001422:	f7ff fb27 	bl	8000a74 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001426:	2308      	movs	r3, #8
 8001428:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4618      	mov	r0, r3
 8001446:	f003 ff09 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 800144a:	2320      	movs	r3, #32
 800144c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001452:	2301      	movs	r3, #1
 8001454:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fef7 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 800146e:	2340      	movs	r3, #64	; 0x40
 8001470:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001476:	2301      	movs	r3, #1
 8001478:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fee5 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001496:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800149c:	2301      	movs	r3, #1
 800149e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fed2 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 fec0 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 80014dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 fead 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8001502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001506:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fe9a 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800152c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001538:	e01a      	b.n	8001570 <MX_GPIO_Init+0x3b0>
 800153a:	bf00      	nop
 800153c:	48001000 	.word	0x48001000
 8001540:	48000400 	.word	0x48000400
 8001544:	48000c00 	.word	0x48000c00
 8001548:	48000800 	.word	0x48000800
 800154c:	00f00001 	.word	0x00f00001
 8001550:	0f000001 	.word	0x0f000001
 8001554:	00f00003 	.word	0x00f00003
 8001558:	0f000002 	.word	0x0f000002
 800155c:	f0000002 	.word	0xf0000002
 8001560:	0f000003 	.word	0x0f000003
 8001564:	f0000003 	.word	0xf0000003
 8001568:	f0000001 	.word	0xf0000001
 800156c:	000f0002 	.word	0x000f0002
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fe6b 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800158a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001596:	2300      	movs	r3, #0
 8001598:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fe58 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fe46 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80015d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fe33 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80015f6:	2304      	movs	r3, #4
 80015f8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fe21 	bl	800525c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800161a:	2302      	movs	r3, #2
 800161c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fe0f 	bl	800525c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 800163e:	2200      	movs	r2, #0
 8001640:	2108      	movs	r1, #8
 8001642:	485a      	ldr	r0, [pc, #360]	; (80017ac <MX_GPIO_Init+0x5ec>)
 8001644:	f7ff fa89 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 8001648:	2200      	movs	r2, #0
 800164a:	2120      	movs	r1, #32
 800164c:	4857      	ldr	r0, [pc, #348]	; (80017ac <MX_GPIO_Init+0x5ec>)
 800164e:	f7ff fa84 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 8001652:	2200      	movs	r2, #0
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	4855      	ldr	r0, [pc, #340]	; (80017ac <MX_GPIO_Init+0x5ec>)
 8001658:	f7ff fa7f 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001662:	4853      	ldr	r0, [pc, #332]	; (80017b0 <MX_GPIO_Init+0x5f0>)
 8001664:	f7ff fa79 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001668:	2200      	movs	r2, #0
 800166a:	2101      	movs	r1, #1
 800166c:	4851      	ldr	r0, [pc, #324]	; (80017b4 <MX_GPIO_Init+0x5f4>)
 800166e:	f7ff fa74 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001678:	484f      	ldr	r0, [pc, #316]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 800167a:	f7ff fa6e 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001684:	484c      	ldr	r0, [pc, #304]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 8001686:	f7ff fa68 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001690:	4849      	ldr	r0, [pc, #292]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 8001692:	f7ff fa62 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169c:	4846      	ldr	r0, [pc, #280]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 800169e:	f7ff fa5c 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	4842      	ldr	r0, [pc, #264]	; (80017b0 <MX_GPIO_Init+0x5f0>)
 80016a8:	f7ff fa57 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	483f      	ldr	r0, [pc, #252]	; (80017b0 <MX_GPIO_Init+0x5f0>)
 80016b4:	f7ff fa51 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2104      	movs	r1, #4
 80016bc:	483e      	ldr	r0, [pc, #248]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 80016be:	f7ff fa4c 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2102      	movs	r1, #2
 80016c6:	4839      	ldr	r0, [pc, #228]	; (80017ac <MX_GPIO_Init+0x5ec>)
 80016c8:	f7ff fa47 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2108      	movs	r1, #8
 80016d0:	4836      	ldr	r0, [pc, #216]	; (80017ac <MX_GPIO_Init+0x5ec>)
 80016d2:	f7ff fa05 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2120      	movs	r1, #32
 80016da:	4834      	ldr	r0, [pc, #208]	; (80017ac <MX_GPIO_Init+0x5ec>)
 80016dc:	f7ff fa00 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2140      	movs	r1, #64	; 0x40
 80016e4:	4831      	ldr	r0, [pc, #196]	; (80017ac <MX_GPIO_Init+0x5ec>)
 80016e6:	f7ff f9fb 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f0:	482f      	ldr	r0, [pc, #188]	; (80017b0 <MX_GPIO_Init+0x5f0>)
 80016f2:	f7ff f9f5 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2101      	movs	r1, #1
 80016fa:	482e      	ldr	r0, [pc, #184]	; (80017b4 <MX_GPIO_Init+0x5f4>)
 80016fc:	f7ff f9f0 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001706:	482c      	ldr	r0, [pc, #176]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 8001708:	f7ff f9ea 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001712:	4829      	ldr	r0, [pc, #164]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 8001714:	f7ff f9e4 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171e:	4826      	ldr	r0, [pc, #152]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 8001720:	f7ff f9de 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172a:	4823      	ldr	r0, [pc, #140]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 800172c:	f7ff f9d8 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 8001730:	2200      	movs	r2, #0
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	481e      	ldr	r0, [pc, #120]	; (80017b0 <MX_GPIO_Init+0x5f0>)
 8001736:	f7ff f9d3 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001740:	481b      	ldr	r0, [pc, #108]	; (80017b0 <MX_GPIO_Init+0x5f0>)
 8001742:	f7ff f9cd 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 8001746:	2200      	movs	r2, #0
 8001748:	2104      	movs	r1, #4
 800174a:	481b      	ldr	r0, [pc, #108]	; (80017b8 <MX_GPIO_Init+0x5f8>)
 800174c:	f7ff f9c8 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001750:	2200      	movs	r2, #0
 8001752:	2102      	movs	r1, #2
 8001754:	4815      	ldr	r0, [pc, #84]	; (80017ac <MX_GPIO_Init+0x5ec>)
 8001756:	f7ff f9c3 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800175a:	213f      	movs	r1, #63	; 0x3f
 800175c:	4814      	ldr	r0, [pc, #80]	; (80017b0 <MX_GPIO_Init+0x5f0>)
 800175e:	f7ff fa39 	bl	8000bd4 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001762:	f7ff f8fd 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8001766:	4603      	mov	r3, r0
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff f94d 	bl	8000a0c <NVIC_EncodePriority>
 8001772:	4603      	mov	r3, r0
 8001774:	4619      	mov	r1, r3
 8001776:	2017      	movs	r0, #23
 8001778:	f7ff f91e 	bl	80009b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800177c:	2017      	movs	r0, #23
 800177e:	f7ff f8fd 	bl	800097c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001782:	f7ff f8ed 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8001786:	4603      	mov	r3, r0
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f93d 	bl	8000a0c <NVIC_EncodePriority>
 8001792:	4603      	mov	r3, r0
 8001794:	4619      	mov	r1, r3
 8001796:	2028      	movs	r0, #40	; 0x28
 8001798:	f7ff f90e 	bl	80009b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800179c:	2028      	movs	r0, #40	; 0x28
 800179e:	f7ff f8ed 	bl	800097c <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	48001000 	.word	0x48001000
 80017b0:	48000800 	.word	0x48000800
 80017b4:	48000400 	.word	0x48000400
 80017b8:	48000c00 	.word	0x48000c00

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_MspInit+0x44>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_MspInit+0x44>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6613      	str	r3, [r2, #96]	; 0x60
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_MspInit+0x44>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_MspInit+0x44>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_MspInit+0x44>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_MspInit+0x44>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0ac      	sub	sp, #176	; 0xb0
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2288      	movs	r2, #136	; 0x88
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fa93 	bl	8005d5c <memset>
  if(DFSDM1_Init == 0)
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d142      	bne.n	80018c4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800183e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001842:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4618      	mov	r0, r3
 8001850:	f002 f948 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800185a:	f7ff ffaf 	bl	80017bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001868:	6613      	str	r3, [r2, #96]	; 0x60
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800186c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800188e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018a8:	2306      	movs	r3, #6
 80018aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018b2:	4619      	mov	r1, r3
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80018b6:	f000 fdb1 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a02      	ldr	r2, [pc, #8]	; (80018cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018c2:	6013      	str	r3, [r2, #0]
  }

}
 80018c4:	bf00      	nop
 80018c6:	37b0      	adds	r7, #176	; 0xb0
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000078c 	.word	0x2000078c
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48001000 	.word	0x48001000

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0ac      	sub	sp, #176	; 0xb0
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2288      	movs	r2, #136	; 0x88
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fa2f 	bl	8005d5c <memset>
  if(hi2c->Instance==I2C2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a21      	ldr	r2, [pc, #132]	; (8001988 <HAL_I2C_MspInit+0xb0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d13b      	bne.n	8001980 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800190c:	2300      	movs	r3, #0
 800190e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4618      	mov	r0, r3
 8001916:	f002 f8e5 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001920:	f7ff ff4c 	bl	80017bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_I2C_MspInit+0xb4>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_I2C_MspInit+0xb4>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_I2C_MspInit+0xb4>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800193c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001944:	2312      	movs	r3, #18
 8001946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194a:	2301      	movs	r3, #1
 800194c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001956:	2304      	movs	r3, #4
 8001958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001960:	4619      	mov	r1, r3
 8001962:	480b      	ldr	r0, [pc, #44]	; (8001990 <HAL_I2C_MspInit+0xb8>)
 8001964:	f000 fd5a 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_I2C_MspInit+0xb4>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_I2C_MspInit+0xb4>)
 800196e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001972:	6593      	str	r3, [r2, #88]	; 0x58
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_I2C_MspInit+0xb4>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	37b0      	adds	r7, #176	; 0xb0
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005800 	.word	0x40005800
 800198c:	40021000 	.word	0x40021000
 8001990:	48000400 	.word	0x48000400

08001994 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_QSPI_MspInit+0x7c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d128      	bne.n	8001a08 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_QSPI_MspInit+0x80>)
 80019b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ba:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <HAL_QSPI_MspInit+0x80>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6513      	str	r3, [r2, #80]	; 0x50
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_QSPI_MspInit+0x80>)
 80019c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_QSPI_MspInit+0x80>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <HAL_QSPI_MspInit+0x80>)
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_QSPI_MspInit+0x80>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80019ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019f8:	230a      	movs	r3, #10
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <HAL_QSPI_MspInit+0x84>)
 8001a04:	f000 fd0a 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	; 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	a0001000 	.word	0xa0001000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48001000 	.word	0x48001000

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_SPI_MspInit+0x7c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d128      	bne.n	8001a90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a48:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_SPI_MspInit+0x80>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a80:	2306      	movs	r3, #6
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_SPI_MspInit+0x84>)
 8001a8c:	f000 fcc6 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40003c00 	.word	0x40003c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	48000800 	.word	0x48000800

08001aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b0ae      	sub	sp, #184	; 0xb8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	2288      	movs	r2, #136	; 0x88
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 f949 	bl	8005d5c <memset>
  if(huart->Instance==USART1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a42      	ldr	r2, [pc, #264]	; (8001bd8 <HAL_UART_MspInit+0x134>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d13b      	bne.n	8001b4c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 ffff 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aec:	f7ff fe66 	bl	80017bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af4:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afa:	6613      	str	r3, [r2, #96]	; 0x60
 8001afc:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	4b34      	ldr	r3, [pc, #208]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	4a33      	ldr	r2, [pc, #204]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b14:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b20:	23c0      	movs	r3, #192	; 0xc0
 8001b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4826      	ldr	r0, [pc, #152]	; (8001be0 <HAL_UART_MspInit+0x13c>)
 8001b46:	f000 fc69 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b4a:	e040      	b.n	8001bce <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <HAL_UART_MspInit+0x140>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d13b      	bne.n	8001bce <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b56:	2304      	movs	r3, #4
 8001b58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 ffbe 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001b6e:	f7ff fe25 	bl	80017bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_UART_MspInit+0x138>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <HAL_UART_MspInit+0x144>)
 8001bca:	f000 fc27 	bl	800241c <HAL_GPIO_Init>
}
 8001bce:	bf00      	nop
 8001bd0:	37b8      	adds	r7, #184	; 0xb8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	48000400 	.word	0x48000400
 8001be4:	40004800 	.word	0x40004800
 8001be8:	48000c00 	.word	0x48000c00

08001bec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ac      	sub	sp, #176	; 0xb0
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2288      	movs	r2, #136	; 0x88
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f004 f8a5 	bl	8005d5c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c1a:	d17c      	bne.n	8001d16 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001c32:	2318      	movs	r3, #24
 8001c34:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c36:	2307      	movs	r3, #7
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f001 ff49 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001c58:	f7ff fdb0 	bl	80017bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	4a2f      	ldr	r2, [pc, #188]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c92:	f000 fbc3 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cb0:	230a      	movs	r3, #10
 8001cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f000 fbac 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001cca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d114      	bne.n	8001d12 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001d00:	f001 f824 	bl	8002d4c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <HAL_PCD_MspInit+0x134>)
 8001d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d10:	e001      	b.n	8001d16 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001d12:	f001 f81b 	bl	8002d4c <HAL_PWREx_EnableVddUSB>
}
 8001d16:	bf00      	nop
 8001d18:	37b0      	adds	r7, #176	; 0xb0
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4013      	ands	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d101      	bne.n	8001d3e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40010400 	.word	0x40010400

08001d50 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6153      	str	r3, [r2, #20]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40010400 	.word	0x40010400

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d74:	e7fe      	b.n	8001d74 <NMI_Handler+0x4>

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbc:	f000 f8f8 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001dc8:	2020      	movs	r0, #32
 8001dca:	f7ff ffab 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001dd4:	2020      	movs	r0, #32
 8001dd6:	f7ff ffbb 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001dda:	2040      	movs	r0, #64	; 0x40
 8001ddc:	f7ff ffa2 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001de6:	2040      	movs	r0, #64	; 0x40
 8001de8:	f7ff ffb2 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001dec:	2080      	movs	r0, #128	; 0x80
 8001dee:	f7ff ff99 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001df8:	2080      	movs	r0, #128	; 0x80
 8001dfa:	f7ff ffa9 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001dfe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e02:	f7ff ff8f 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001e0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e10:	f7ff ff9e 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001e1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e20:	f7ff ff80 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8001e2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e2e:	f7ff ff8f 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8001e32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e36:	f7ff ff75 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001e40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e44:	f7ff ff84 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001e48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e4c:	f7ff ff6a 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001e56:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e5a:	f7ff ff79 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001e5e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e62:	f7ff ff5f 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001e6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e70:	f7ff ff6e 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001e74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e78:	f7ff ff54 	bl	8001d24 <LL_EXTI_IsActiveFlag_0_31>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001e82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e86:	f7ff ff63 	bl	8001d50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb8:	f7ff ffea 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ebe:	490d      	ldr	r1, [pc, #52]	; (8001ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <LoopForever+0xe>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed4:	4c0a      	ldr	r4, [pc, #40]	; (8001f00 <LoopForever+0x16>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f003 ff43 	bl	8005d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee6:	f7fe fecf 	bl	8000c88 <main>

08001eea <LoopForever>:

LoopForever:
    b LoopForever
 8001eea:	e7fe      	b.n	8001eea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001eec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ef8:	08005e30 	.word	0x08005e30
  ldr r2, =_sbss
 8001efc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f00:	200007b8 	.word	0x200007b8

08001f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_2_IRQHandler>

08001f06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f943 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 f80e 	bl	8001f38 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	e001      	b.n	8001f2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f28:	f7ff fc4e 	bl	80017c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_InitTick+0x6c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d023      	beq.n	8001f94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_InitTick+0x70>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_InitTick+0x6c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f941 	bl	80021ea <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d809      	bhi.n	8001f88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f919 	bl	80021b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_InitTick+0x74>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e007      	b.n	8001f98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e004      	b.n	8001f98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e001      	b.n	8001f98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000790 	.word	0x20000790

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000790 	.word	0x20000790

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000008 	.word	0x20000008

08002038 <__NVIC_SetPriorityGrouping>:
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_SetPriority>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	; (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	; (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f7ff ff8e 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff47 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff5c 	bl	8002080 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff8e 	bl	80020f0 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5d 	bl	800209c <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffb0 	bl	8002158 <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0ac      	b.n	8002370 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f8b2 	bl	8002384 <DFSDM_GetChannelFromInstance>
 8002220:	4603      	mov	r3, r0
 8002222:	4a55      	ldr	r2, [pc, #340]	; (8002378 <HAL_DFSDM_ChannelInit+0x174>)
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e09f      	b.n	8002370 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff faed 	bl	8001810 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002236:	4b51      	ldr	r3, [pc, #324]	; (800237c <HAL_DFSDM_ChannelInit+0x178>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	4a4f      	ldr	r2, [pc, #316]	; (800237c <HAL_DFSDM_ChannelInit+0x178>)
 800223e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002240:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_DFSDM_ChannelInit+0x178>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d125      	bne.n	8002294 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002248:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4c      	ldr	r2, [pc, #304]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 800224e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002252:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4948      	ldr	r1, [pc, #288]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002262:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a46      	ldr	r2, [pc, #280]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 8002268:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800226c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d108      	bne.n	8002288 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002276:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	3b01      	subs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	493f      	ldr	r1, [pc, #252]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <HAL_DFSDM_ChannelInit+0x17c>)
 800228e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002292:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80022a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6819      	ldr	r1, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 020f 	bic.w	r2, r2, #15
 80022d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80022f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f002 0207 	and.w	r2, r2, #7
 8002324:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002350:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f810 	bl	8002384 <DFSDM_GetChannelFromInstance>
 8002364:	4602      	mov	r2, r0
 8002366:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_DFSDM_ChannelInit+0x174>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000798 	.word	0x20000798
 800237c:	20000794 	.word	0x20000794
 8002380:	40016000 	.word	0x40016000

08002384 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <DFSDM_GetChannelFromInstance+0x7c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d102      	bne.n	800239a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e02b      	b.n	80023f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <DFSDM_GetChannelFromInstance+0x80>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d102      	bne.n	80023a8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e024      	b.n	80023f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <DFSDM_GetChannelFromInstance+0x84>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d102      	bne.n	80023b6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e01d      	b.n	80023f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <DFSDM_GetChannelFromInstance+0x88>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d102      	bne.n	80023c4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80023be:	2304      	movs	r3, #4
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	e016      	b.n	80023f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <DFSDM_GetChannelFromInstance+0x8c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d102      	bne.n	80023d2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80023cc:	2305      	movs	r3, #5
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e00f      	b.n	80023f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <DFSDM_GetChannelFromInstance+0x90>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d102      	bne.n	80023e0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80023da:	2306      	movs	r3, #6
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e008      	b.n	80023f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <DFSDM_GetChannelFromInstance+0x94>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d102      	bne.n	80023ee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80023e8:	2307      	movs	r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e001      	b.n	80023f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80023ee:	2303      	movs	r3, #3
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40016000 	.word	0x40016000
 8002404:	40016020 	.word	0x40016020
 8002408:	40016040 	.word	0x40016040
 800240c:	40016080 	.word	0x40016080
 8002410:	400160a0 	.word	0x400160a0
 8002414:	400160c0 	.word	0x400160c0
 8002418:	400160e0 	.word	0x400160e0

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242a:	e17f      	b.n	800272c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8171 	beq.w	8002726 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x40>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d118      	bne.n	80024fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80ac 	beq.w	8002726 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_GPIO_Init+0x330>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4a5e      	ldr	r2, [pc, #376]	; (800274c <HAL_GPIO_Init+0x330>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6613      	str	r3, [r2, #96]	; 0x60
 80025da:	4b5c      	ldr	r3, [pc, #368]	; (800274c <HAL_GPIO_Init+0x330>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025e6:	4a5a      	ldr	r2, [pc, #360]	; (8002750 <HAL_GPIO_Init+0x334>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002610:	d025      	beq.n	800265e <HAL_GPIO_Init+0x242>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_GPIO_Init+0x338>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01f      	beq.n	800265a <HAL_GPIO_Init+0x23e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_GPIO_Init+0x33c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0x23a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4d      	ldr	r2, [pc, #308]	; (800275c <HAL_GPIO_Init+0x340>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x236>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <HAL_GPIO_Init+0x344>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x232>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4b      	ldr	r2, [pc, #300]	; (8002764 <HAL_GPIO_Init+0x348>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x22e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <HAL_GPIO_Init+0x34c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x22a>
 8002642:	2306      	movs	r3, #6
 8002644:	e00c      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002646:	2307      	movs	r3, #7
 8002648:	e00a      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800264a:	2305      	movs	r3, #5
 800264c:	e008      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800264e:	2304      	movs	r3, #4
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002652:	2303      	movs	r3, #3
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800265e:	2300      	movs	r3, #0
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	f002 0203 	and.w	r2, r2, #3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4093      	lsls	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002670:	4937      	ldr	r1, [pc, #220]	; (8002750 <HAL_GPIO_Init+0x334>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_GPIO_Init+0x350>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026a2:	4a32      	ldr	r2, [pc, #200]	; (800276c <HAL_GPIO_Init+0x350>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_GPIO_Init+0x350>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_GPIO_Init+0x350>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_GPIO_Init+0x350>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_GPIO_Init+0x350>)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_GPIO_Init+0x350>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_GPIO_Init+0x350>)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa22 f303 	lsr.w	r3, r2, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f ae78 	bne.w	800242c <HAL_GPIO_Init+0x10>
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40010000 	.word	0x40010000
 8002754:	48000400 	.word	0x48000400
 8002758:	48000800 	.word	0x48000800
 800275c:	48000c00 	.word	0x48000c00
 8002760:	48001000 	.word	0x48001000
 8002764:	48001400 	.word	0x48001400
 8002768:	48001800 	.word	0x48001800
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e08d      	b.n	800289e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff f89e 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d107      	bne.n	80027ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	e006      	b.n	80027f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d108      	bne.n	8002812 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	e007      	b.n	8002822 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002820:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002834:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002844:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69d9      	ldr	r1, [r3, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d138      	bne.n	800292e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e032      	b.n	8002930 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2224      	movs	r2, #36	; 0x24
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	d139      	bne.n	80029c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800295c:	2302      	movs	r3, #2
 800295e:	e033      	b.n	80029c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800298e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d6:	b08f      	sub	sp, #60	; 0x3c
 80029d8:	af0a      	add	r7, sp, #40	; 0x28
 80029da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e116      	b.n	8002c14 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff f8f3 	bl	8001bec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2203      	movs	r2, #3
 8002a0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fef2 	bl	800580e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	687e      	ldr	r6, [r7, #4]
 8002a32:	466d      	mov	r5, sp
 8002a34:	f106 0410 	add.w	r4, r6, #16
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a48:	1d33      	adds	r3, r6, #4
 8002a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4c:	6838      	ldr	r0, [r7, #0]
 8002a4e:	f002 feb2 	bl	80057b6 <USB_CoreInit>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0d7      	b.n	8002c14 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 fee0 	bl	8005830 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	e04a      	b.n	8002b0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	333d      	adds	r3, #61	; 0x3d
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	333c      	adds	r3, #60	; 0x3c
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	b298      	uxth	r0, r3
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3356      	adds	r3, #86	; 0x56
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3340      	adds	r3, #64	; 0x40
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3344      	adds	r3, #68	; 0x44
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3348      	adds	r3, #72	; 0x48
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	334c      	adds	r3, #76	; 0x4c
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d3af      	bcc.n	8002a76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
 8002b1a:	e044      	b.n	8002ba6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3b5      	bcc.n	8002b1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	687e      	ldr	r6, [r7, #4]
 8002bb8:	466d      	mov	r5, sp
 8002bba:	f106 0410 	add.w	r4, r6, #16
 8002bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bce:	1d33      	adds	r3, r6, #4
 8002bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd2:	6838      	ldr	r0, [r7, #0]
 8002bd4:	f002 fe78 	bl	80058c8 <USB_DevInit>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e014      	b.n	8002c14 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f80a 	bl	8002c1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f81a 	bl	8005c46 <USB_DevDisconnect>

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	f043 0303 	orr.w	r3, r3, #3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40007000 	.word	0x40007000

08002c84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40007000 	.word	0x40007000

08002ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cae:	d130      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbc:	d038      	beq.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2232      	movs	r2, #50	; 0x32
 8002cd4:	fb02 f303 	mul.w	r3, r2, r3
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0c9b      	lsrs	r3, r3, #18
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce4:	e002      	b.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d102      	bne.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f2      	bne.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0c:	d110      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e00f      	b.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1e:	d007      	beq.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d28:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000
 8002d44:	20000000 	.word	0x20000000
 8002d48:	431bde83 	.word	0x431bde83

08002d4c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5a:	6053      	str	r3, [r2, #4]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40007000 	.word	0x40007000

08002d6c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff f930 	bl	8001fd8 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e063      	b.n	8002e4c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fe fdfb 	bl	8001994 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f858 	bl	8002e58 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	021a      	lsls	r2, r3, #8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2120      	movs	r1, #32
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f850 	bl	8002e74 <QSPI_WaitFlagStateUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d131      	bne.n	8002e42 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002de8:	f023 0310 	bic.w	r3, r3, #16
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6852      	ldr	r2, [r2, #4]
 8002df0:	0611      	lsls	r1, r2, #24
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68d2      	ldr	r2, [r2, #12]
 8002df6:	4311      	orrs	r1, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_QSPI_Init+0xe8>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6912      	ldr	r2, [r2, #16]
 8002e0e:	0411      	lsls	r1, r2, #16
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6952      	ldr	r2, [r2, #20]
 8002e14:	4311      	orrs	r1, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6992      	ldr	r2, [r2, #24]
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	ffe0f8fe 	.word	0xffe0f8fe

08002e58 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e84:	e01a      	b.n	8002ebc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d016      	beq.n	8002ebc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7ff f8a3 	bl	8001fd8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e00e      	b.n	8002eda <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1d6      	bne.n	8002e86 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e3ca      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef6:	4b97      	ldr	r3, [pc, #604]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f00:	4b94      	ldr	r3, [pc, #592]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80e4 	beq.w	80030e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_RCC_OscConfig+0x4a>
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	f040 808b 	bne.w	800303c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	f040 8087 	bne.w	800303c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f2e:	4b89      	ldr	r3, [pc, #548]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x62>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e3a2      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	4b82      	ldr	r3, [pc, #520]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_RCC_OscConfig+0x7c>
 8002f56:	4b7f      	ldr	r3, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5e:	e005      	b.n	8002f6c <HAL_RCC_OscConfig+0x88>
 8002f60:	4b7c      	ldr	r3, [pc, #496]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d223      	bcs.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fd55 	bl	8003a24 <RCC_SetFlashLatencyFromMSIRange>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e383      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f84:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a72      	ldr	r2, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	f043 0308 	orr.w	r3, r3, #8
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	496d      	ldr	r1, [pc, #436]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	4968      	ldr	r1, [pc, #416]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
 8002fb6:	e025      	b.n	8003004 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a65      	ldr	r2, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f043 0308 	orr.w	r3, r3, #8
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4960      	ldr	r1, [pc, #384]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	495b      	ldr	r1, [pc, #364]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fd15 	bl	8003a24 <RCC_SetFlashLatencyFromMSIRange>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e343      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003004:	f000 fc4a 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b52      	ldr	r3, [pc, #328]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	4950      	ldr	r1, [pc, #320]	; (8003158 <HAL_RCC_OscConfig+0x274>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	4a4e      	ldr	r2, [pc, #312]	; (800315c <HAL_RCC_OscConfig+0x278>)
 8003022:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003024:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <HAL_RCC_OscConfig+0x27c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe ff85 	bl	8001f38 <HAL_InitTick>
 800302e:	4603      	mov	r3, r0
 8003030:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d052      	beq.n	80030de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	e327      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d032      	beq.n	80030aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a42      	ldr	r2, [pc, #264]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003050:	f7fe ffc2 	bl	8001fd8 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003058:	f7fe ffbe 	bl	8001fd8 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e310      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800306a:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003076:	4b37      	ldr	r3, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a36      	ldr	r2, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4931      	ldr	r1, [pc, #196]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	492c      	ldr	r1, [pc, #176]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e01a      	b.n	80030e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a29      	ldr	r2, [pc, #164]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030b6:	f7fe ff8f 	bl	8001fd8 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030be:	f7fe ff8b 	bl	8001fd8 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e2dd      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0x1da>
 80030dc:	e000      	b.n	80030e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d074      	beq.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x21a>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d10e      	bne.n	8003116 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d10b      	bne.n	8003116 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d064      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d160      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e2ba      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x24a>
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	e026      	b.n	800317c <HAL_RCC_OscConfig+0x298>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003136:	d115      	bne.n	8003164 <HAL_RCC_OscConfig+0x280>
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a05      	ldr	r2, [pc, #20]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800313e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a02      	ldr	r2, [pc, #8]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e014      	b.n	800317c <HAL_RCC_OscConfig+0x298>
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	08005dd8 	.word	0x08005dd8
 800315c:	20000000 	.word	0x20000000
 8003160:	20000004 	.word	0x20000004
 8003164:	4ba0      	ldr	r3, [pc, #640]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a9f      	ldr	r2, [pc, #636]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b9d      	ldr	r3, [pc, #628]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a9c      	ldr	r2, [pc, #624]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe ff28 	bl	8001fd8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe ff24 	bl	8001fd8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e276      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319e:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x2a8>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe ff14 	bl	8001fd8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe ff10 	bl	8001fd8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e262      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031c6:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2d0>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d060      	beq.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x310>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d119      	bne.n	8003222 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d116      	bne.n	8003222 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f4:	4b7c      	ldr	r3, [pc, #496]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_OscConfig+0x328>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e23f      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b76      	ldr	r3, [pc, #472]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	4973      	ldr	r1, [pc, #460]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003220:	e040      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d023      	beq.n	8003272 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fe fecf 	bl	8001fd8 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323e:	f7fe fecb 	bl	8001fd8 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e21d      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003250:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325c:	4b62      	ldr	r3, [pc, #392]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	495f      	ldr	r1, [pc, #380]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
 8003270:	e018      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5c      	ldr	r2, [pc, #368]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe feab 	bl	8001fd8 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003286:	f7fe fea7 	bl	8001fd8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e1f9      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d03c      	beq.n	800332a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b8:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032be:	4a4a      	ldr	r2, [pc, #296]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe fe86 	bl	8001fd8 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fe fe82 	bl	8001fd8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1d4      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e2:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ef      	beq.n	80032d0 <HAL_RCC_OscConfig+0x3ec>
 80032f0:	e01b      	b.n	800332a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f8:	4a3b      	ldr	r2, [pc, #236]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe fe69 	bl	8001fd8 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330a:	f7fe fe65 	bl	8001fd8 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1b7      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800331c:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ef      	bne.n	800330a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80a6 	beq.w	8003484 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10d      	bne.n	8003364 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	6593      	str	r3, [r2, #88]	; 0x58
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003360:	2301      	movs	r3, #1
 8003362:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_RCC_OscConfig+0x508>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d118      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_RCC_OscConfig+0x508>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_RCC_OscConfig+0x508>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337c:	f7fe fe2c 	bl	8001fd8 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe fe28 	bl	8001fd8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e17a      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <HAL_RCC_OscConfig+0x508>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_OscConfig+0x4d8>
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ba:	e029      	b.n	8003410 <HAL_RCC_OscConfig+0x52c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d115      	bne.n	80033f0 <HAL_RCC_OscConfig+0x50c>
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a03      	ldr	r2, [pc, #12]	; (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e4:	e014      	b.n	8003410 <HAL_RCC_OscConfig+0x52c>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
 80033f0:	4b9c      	ldr	r3, [pc, #624]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	4a9b      	ldr	r2, [pc, #620]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003400:	4b98      	ldr	r3, [pc, #608]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a97      	ldr	r2, [pc, #604]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d016      	beq.n	8003446 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe fdde 	bl	8001fd8 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe fdda 	bl	8001fd8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e12a      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003436:	4b8b      	ldr	r3, [pc, #556]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ed      	beq.n	8003420 <HAL_RCC_OscConfig+0x53c>
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fe fdc7 	bl	8001fd8 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe fdc3 	bl	8001fd8 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e113      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003464:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ed      	bne.n	800344e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b7a      	ldr	r3, [pc, #488]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	4a79      	ldr	r2, [pc, #484]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80fe 	beq.w	800368a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	2b02      	cmp	r3, #2
 8003494:	f040 80d0 	bne.w	8003638 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003498:	4b72      	ldr	r3, [pc, #456]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 0203 	and.w	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d130      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	3b01      	subs	r3, #1
 80034b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d127      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d11f      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034d8:	2a07      	cmp	r2, #7
 80034da:	bf14      	ite	ne
 80034dc:	2201      	movne	r2, #1
 80034de:	2200      	moveq	r2, #0
 80034e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d113      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	3b01      	subs	r3, #1
 80034f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d109      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d06e      	beq.n	80035ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d069      	beq.n	80035e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0ad      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003530:	4b4c      	ldr	r3, [pc, #304]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4b      	ldr	r2, [pc, #300]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800353c:	f7fe fd4c 	bl	8001fd8 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe fd48 	bl	8001fd8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e09a      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003556:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003562:	4b40      	ldr	r3, [pc, #256]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_RCC_OscConfig+0x784>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003572:	3a01      	subs	r2, #1
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800357c:	0212      	lsls	r2, r2, #8
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003584:	0852      	lsrs	r2, r2, #1
 8003586:	3a01      	subs	r2, #1
 8003588:	0552      	lsls	r2, r2, #21
 800358a:	4311      	orrs	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003590:	0852      	lsrs	r2, r2, #1
 8003592:	3a01      	subs	r2, #1
 8003594:	0652      	lsls	r2, r2, #25
 8003596:	4311      	orrs	r1, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800359c:	0912      	lsrs	r2, r2, #4
 800359e:	0452      	lsls	r2, r2, #17
 80035a0:	430a      	orrs	r2, r1
 80035a2:	4930      	ldr	r1, [pc, #192]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035a8:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2d      	ldr	r2, [pc, #180]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c0:	f7fe fd0a 	bl	8001fd8 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe fd06 	bl	8001fd8 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e058      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e6:	e050      	b.n	800368a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e04f      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d148      	bne.n	800368a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003604:	4b17      	ldr	r3, [pc, #92]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a16      	ldr	r2, [pc, #88]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003610:	f7fe fce2 	bl	8001fd8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe fcde 	bl	8001fd8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e030      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x734>
 8003636:	e028      	b.n	800368a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d023      	beq.n	8003686 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a08      	ldr	r2, [pc, #32]	; (8003664 <HAL_RCC_OscConfig+0x780>)
 8003644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fe fcc5 	bl	8001fd8 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003650:	e00c      	b.n	800366c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe fcc1 	bl	8001fd8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d905      	bls.n	800366c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e013      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
 8003664:	40021000 	.word	0x40021000
 8003668:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_OscConfig+0x7b0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ec      	bne.n	8003652 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_RCC_OscConfig+0x7b0>)
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4905      	ldr	r1, [pc, #20]	; (8003694 <HAL_RCC_OscConfig+0x7b0>)
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCC_OscConfig+0x7b4>)
 8003680:	4013      	ands	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
 8003684:	e001      	b.n	800368a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	feeefffc 	.word	0xfeeefffc

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0e7      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b75      	ldr	r3, [pc, #468]	; (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b72      	ldr	r3, [pc, #456]	; (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	4970      	ldr	r1, [pc, #448]	; (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b6e      	ldr	r3, [pc, #440]	; (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0cf      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d908      	bls.n	800370e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4960      	ldr	r1, [pc, #384]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d04c      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	4b5a      	ldr	r3, [pc, #360]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d121      	bne.n	8003772 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0a6      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373a:	4b54      	ldr	r3, [pc, #336]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d115      	bne.n	8003772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e09a      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003752:	4b4e      	ldr	r3, [pc, #312]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e08e      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e086      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4943      	ldr	r1, [pc, #268]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fe fc28 	bl	8001fd8 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fe fc24 	bl	8001fd8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e06e      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b3a      	ldr	r3, [pc, #232]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d208      	bcs.n	80037e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b2e      	ldr	r3, [pc, #184]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	492b      	ldr	r1, [pc, #172]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d210      	bcs.n	8003812 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 0207 	bic.w	r2, r3, #7
 80037f8:	4923      	ldr	r1, [pc, #140]	; (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003800:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e036      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4918      	ldr	r1, [pc, #96]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4910      	ldr	r1, [pc, #64]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003850:	f000 f824 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	490b      	ldr	r1, [pc, #44]	; (8003890 <HAL_RCC_ClockConfig+0x1f4>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1f8>)
 800386e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1fc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fb5f 	bl	8001f38 <HAL_InitTick>
 800387a:	4603      	mov	r3, r0
 800387c:	72fb      	strb	r3, [r7, #11]

  return status;
 800387e:	7afb      	ldrb	r3, [r7, #11]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40022000 	.word	0x40022000
 800388c:	40021000 	.word	0x40021000
 8003890:	08005dd8 	.word	0x08005dd8
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b4:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d121      	bne.n	800390e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d11e      	bne.n	800390e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038dc:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	e005      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038ec:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038f8:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003900:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d102      	bne.n	800391a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	e004      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d101      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003920:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003922:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d134      	bne.n	8003994 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800392a:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0xa6>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d003      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0xac>
 8003940:	e005      	b.n	800394e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003944:	617b      	str	r3, [r7, #20]
      break;
 8003946:	e005      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800394a:	617b      	str	r3, [r7, #20]
      break;
 800394c:	e002      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	617b      	str	r3, [r7, #20]
      break;
 8003952:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	3301      	adds	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	fb03 f202 	mul.w	r2, r3, r2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	0e5b      	lsrs	r3, r3, #25
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	3301      	adds	r3, #1
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003994:	69bb      	ldr	r3, [r7, #24]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	08005df0 	.word	0x08005df0
 80039ac:	00f42400 	.word	0x00f42400
 80039b0:	007a1200 	.word	0x007a1200

080039b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000000 	.word	0x20000000

080039cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039d0:	f7ff fff0 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4904      	ldr	r1, [pc, #16]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000
 80039f4:	08005de8 	.word	0x08005de8

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039fc:	f7ff ffda 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0adb      	lsrs	r3, r3, #11
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4904      	ldr	r1, [pc, #16]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08005de8 	.word	0x08005de8

08003a24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a3c:	f7ff f922 	bl	8002c84 <HAL_PWREx_GetVoltageRange>
 8003a40:	6178      	str	r0, [r7, #20]
 8003a42:	e014      	b.n	8003a6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a44:	4b25      	ldr	r3, [pc, #148]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	4a24      	ldr	r2, [pc, #144]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a50:	4b22      	ldr	r3, [pc, #136]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a5c:	f7ff f912 	bl	8002c84 <HAL_PWREx_GetVoltageRange>
 8003a60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a74:	d10b      	bne.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d919      	bls.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a80:	d902      	bls.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a82:	2302      	movs	r3, #2
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e013      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a88:	2301      	movs	r3, #1
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e010      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d902      	bls.n	8003a9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a94:	2303      	movs	r3, #3
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	e00a      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b80      	cmp	r3, #128	; 0x80
 8003a9e:	d102      	bne.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	e004      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b70      	cmp	r3, #112	; 0x70
 8003aaa:	d101      	bne.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aac:	2301      	movs	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 0207 	bic.w	r2, r3, #7
 8003ab8:	4909      	ldr	r1, [pc, #36]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d001      	beq.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40022000 	.word	0x40022000

08003ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aec:	2300      	movs	r3, #0
 8003aee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d041      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b08:	d02a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b0e:	d824      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b14:	d008      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b1a:	d81e      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b24:	d010      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b26:	e018      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b28:	4b86      	ldr	r3, [pc, #536]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a85      	ldr	r2, [pc, #532]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b34:	e015      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 facb 	bl	80040d8 <RCCEx_PLLSAI1_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b46:	e00c      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3320      	adds	r3, #32
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fbb6 	bl	80042c0 <RCCEx_PLLSAI2_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b68:	4b76      	ldr	r3, [pc, #472]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b76:	4973      	ldr	r1, [pc, #460]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b7e:	e001      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d041      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b98:	d02a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b9e:	d824      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003baa:	d81e      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bb4:	d010      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bb6:	e018      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bb8:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a61      	ldr	r2, [pc, #388]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bc4:	e015      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa83 	bl	80040d8 <RCCEx_PLLSAI1_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bd6:	e00c      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3320      	adds	r3, #32
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fb6e 	bl	80042c0 <RCCEx_PLLSAI2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	74fb      	strb	r3, [r7, #19]
      break;
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bf8:	4b52      	ldr	r3, [pc, #328]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c06:	494f      	ldr	r1, [pc, #316]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80a0 	beq.w	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3c:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	4a40      	ldr	r2, [pc, #256]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6593      	str	r3, [r2, #88]	; 0x58
 8003c48:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c54:	2301      	movs	r3, #1
 8003c56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c58:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3a      	ldr	r2, [pc, #232]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c64:	f7fe f9b8 	bl	8001fd8 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c6a:	e009      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fe f9b4 	bl	8001fd8 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d902      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c7e:	e005      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c80:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ef      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d15c      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c92:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01f      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d019      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cdc:	4a19      	ldr	r2, [pc, #100]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fe f973 	bl	8001fd8 <HAL_GetTick>
 8003cf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf4:	e00b      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe f96f 	bl	8001fd8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d902      	bls.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ec      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d32:	4904      	ldr	r1, [pc, #16]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d3a:	e009      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	74bb      	strb	r3, [r7, #18]
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d50:	7c7b      	ldrb	r3, [r7, #17]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b9e      	ldr	r3, [pc, #632]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	4a9d      	ldr	r2, [pc, #628]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d6e:	4b98      	ldr	r3, [pc, #608]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f023 0203 	bic.w	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	4994      	ldr	r1, [pc, #592]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d90:	4b8f      	ldr	r3, [pc, #572]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f023 020c 	bic.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	498c      	ldr	r1, [pc, #560]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003db2:	4b87      	ldr	r3, [pc, #540]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	4983      	ldr	r1, [pc, #524]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dd4:	4b7e      	ldr	r3, [pc, #504]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	497b      	ldr	r1, [pc, #492]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df6:	4b76      	ldr	r3, [pc, #472]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	4972      	ldr	r1, [pc, #456]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e18:	4b6d      	ldr	r3, [pc, #436]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	496a      	ldr	r1, [pc, #424]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e3a:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	4961      	ldr	r1, [pc, #388]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e5c:	4b5c      	ldr	r3, [pc, #368]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6a:	4959      	ldr	r1, [pc, #356]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e7e:	4b54      	ldr	r3, [pc, #336]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	4950      	ldr	r1, [pc, #320]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	4948      	ldr	r1, [pc, #288]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec2:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	493f      	ldr	r1, [pc, #252]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d028      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee4:	4b3a      	ldr	r3, [pc, #232]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef2:	4937      	ldr	r1, [pc, #220]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f02:	d106      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f04:	4b32      	ldr	r3, [pc, #200]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a31      	ldr	r2, [pc, #196]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f0e:	60d3      	str	r3, [r2, #12]
 8003f10:	e011      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f1a:	d10c      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	2101      	movs	r1, #1
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f8d8 	bl	80040d8 <RCCEx_PLLSAI1_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d028      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f42:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	491f      	ldr	r1, [pc, #124]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6c:	60d3      	str	r3, [r2, #12]
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f8a9 	bl	80040d8 <RCCEx_PLLSAI1_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d02b      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fae:	4908      	ldr	r1, [pc, #32]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fbe:	d109      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a02      	ldr	r2, [pc, #8]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fca:	60d3      	str	r3, [r2, #12]
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 f877 	bl	80040d8 <RCCEx_PLLSAI1_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ff4:	7cfb      	ldrb	r3, [r7, #19]
 8003ff6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02f      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004012:	4928      	ldr	r1, [pc, #160]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004022:	d10d      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f854 	bl	80040d8 <RCCEx_PLLSAI1_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d014      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	74bb      	strb	r3, [r7, #18]
 800403e:	e011      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3320      	adds	r3, #32
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f935 	bl	80042c0 <RCCEx_PLLSAI2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407e:	490d      	ldr	r1, [pc, #52]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a2:	4904      	ldr	r1, [pc, #16]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000

080040d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040e6:	4b75      	ldr	r3, [pc, #468]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d018      	beq.n	8004124 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040f2:	4b72      	ldr	r3, [pc, #456]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0203 	and.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d10d      	bne.n	800411e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
       ||
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800410a:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
       ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d047      	beq.n	80041ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	e044      	b.n	80041ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d018      	beq.n	800415e <RCCEx_PLLSAI1_Config+0x86>
 800412c:	2b03      	cmp	r3, #3
 800412e:	d825      	bhi.n	800417c <RCCEx_PLLSAI1_Config+0xa4>
 8004130:	2b01      	cmp	r3, #1
 8004132:	d002      	beq.n	800413a <RCCEx_PLLSAI1_Config+0x62>
 8004134:	2b02      	cmp	r3, #2
 8004136:	d009      	beq.n	800414c <RCCEx_PLLSAI1_Config+0x74>
 8004138:	e020      	b.n	800417c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800413a:	4b60      	ldr	r3, [pc, #384]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11d      	bne.n	8004182 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800414a:	e01a      	b.n	8004182 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800414c:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d116      	bne.n	8004186 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415c:	e013      	b.n	8004186 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800415e:	4b57      	ldr	r3, [pc, #348]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10f      	bne.n	800418a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800416a:	4b54      	ldr	r3, [pc, #336]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800417a:	e006      	b.n	800418a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      break;
 8004180:	e004      	b.n	800418c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004182:	bf00      	nop
 8004184:	e002      	b.n	800418c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800418a:	bf00      	nop
    }

    if(status == HAL_OK)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10d      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004192:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6819      	ldr	r1, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	430b      	orrs	r3, r1
 80041a8:	4944      	ldr	r1, [pc, #272]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d17d      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041b4:	4b41      	ldr	r3, [pc, #260]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a40      	ldr	r2, [pc, #256]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c0:	f7fd ff0a 	bl	8001fd8 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041c6:	e009      	b.n	80041dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c8:	f7fd ff06 	bl	8001fd8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d902      	bls.n	80041dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	73fb      	strb	r3, [r7, #15]
        break;
 80041da:	e005      	b.n	80041e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041dc:	4b37      	ldr	r3, [pc, #220]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ef      	bne.n	80041c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d160      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d111      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6892      	ldr	r2, [r2, #8]
 8004204:	0211      	lsls	r1, r2, #8
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68d2      	ldr	r2, [r2, #12]
 800420a:	0912      	lsrs	r2, r2, #4
 800420c:	0452      	lsls	r2, r2, #17
 800420e:	430a      	orrs	r2, r1
 8004210:	492a      	ldr	r1, [pc, #168]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	610b      	str	r3, [r1, #16]
 8004216:	e027      	b.n	8004268 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d112      	bne.n	8004244 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004226:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	0211      	lsls	r1, r2, #8
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6912      	ldr	r2, [r2, #16]
 8004234:	0852      	lsrs	r2, r2, #1
 8004236:	3a01      	subs	r2, #1
 8004238:	0552      	lsls	r2, r2, #21
 800423a:	430a      	orrs	r2, r1
 800423c:	491f      	ldr	r1, [pc, #124]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
 8004242:	e011      	b.n	8004268 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004244:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800424c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	0211      	lsls	r1, r2, #8
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6952      	ldr	r2, [r2, #20]
 800425a:	0852      	lsrs	r2, r2, #1
 800425c:	3a01      	subs	r2, #1
 800425e:	0652      	lsls	r2, r2, #25
 8004260:	430a      	orrs	r2, r1
 8004262:	4916      	ldr	r1, [pc, #88]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800426e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004272:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fd feb0 	bl	8001fd8 <HAL_GetTick>
 8004278:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800427a:	e009      	b.n	8004290 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800427c:	f7fd feac 	bl	8001fd8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d902      	bls.n	8004290 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	73fb      	strb	r3, [r7, #15]
          break;
 800428e:	e005      	b.n	800429c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	4904      	ldr	r1, [pc, #16]	; (80042bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000

080042c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ce:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042da:	4b67      	ldr	r3, [pc, #412]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0203 	and.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d10d      	bne.n	8004306 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
       ||
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042f2:	4b61      	ldr	r3, [pc, #388]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
       ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d047      	beq.n	8004396 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e044      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d018      	beq.n	8004346 <RCCEx_PLLSAI2_Config+0x86>
 8004314:	2b03      	cmp	r3, #3
 8004316:	d825      	bhi.n	8004364 <RCCEx_PLLSAI2_Config+0xa4>
 8004318:	2b01      	cmp	r3, #1
 800431a:	d002      	beq.n	8004322 <RCCEx_PLLSAI2_Config+0x62>
 800431c:	2b02      	cmp	r3, #2
 800431e:	d009      	beq.n	8004334 <RCCEx_PLLSAI2_Config+0x74>
 8004320:	e020      	b.n	8004364 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004322:	4b55      	ldr	r3, [pc, #340]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11d      	bne.n	800436a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004332:	e01a      	b.n	800436a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004334:	4b50      	ldr	r3, [pc, #320]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004344:	e013      	b.n	800436e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004346:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004352:	4b49      	ldr	r3, [pc, #292]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004362:	e006      	b.n	8004372 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      break;
 8004368:	e004      	b.n	8004374 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800436a:	bf00      	nop
 800436c:	e002      	b.n	8004374 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004372:	bf00      	nop
    }

    if(status == HAL_OK)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800437a:	4b3f      	ldr	r3, [pc, #252]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	430b      	orrs	r3, r1
 8004390:	4939      	ldr	r1, [pc, #228]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004392:	4313      	orrs	r3, r2
 8004394:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d167      	bne.n	800446c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800439c:	4b36      	ldr	r3, [pc, #216]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a35      	ldr	r2, [pc, #212]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a8:	f7fd fe16 	bl	8001fd8 <HAL_GetTick>
 80043ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ae:	e009      	b.n	80043c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043b0:	f7fd fe12 	bl	8001fd8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	73fb      	strb	r3, [r7, #15]
        break;
 80043c2:	e005      	b.n	80043d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043c4:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ef      	bne.n	80043b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d14a      	bne.n	800446c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d111      	bne.n	8004400 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043dc:	4b26      	ldr	r3, [pc, #152]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6892      	ldr	r2, [r2, #8]
 80043ec:	0211      	lsls	r1, r2, #8
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	0912      	lsrs	r2, r2, #4
 80043f4:	0452      	lsls	r2, r2, #17
 80043f6:	430a      	orrs	r2, r1
 80043f8:	491f      	ldr	r1, [pc, #124]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	614b      	str	r3, [r1, #20]
 80043fe:	e011      	b.n	8004424 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004408:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	0211      	lsls	r1, r2, #8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6912      	ldr	r2, [r2, #16]
 8004416:	0852      	lsrs	r2, r2, #1
 8004418:	3a01      	subs	r2, #1
 800441a:	0652      	lsls	r2, r2, #25
 800441c:	430a      	orrs	r2, r1
 800441e:	4916      	ldr	r1, [pc, #88]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a13      	ldr	r2, [pc, #76]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd fdd2 	bl	8001fd8 <HAL_GetTick>
 8004434:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004436:	e009      	b.n	800444c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004438:	f7fd fdce 	bl	8001fd8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d902      	bls.n	800444c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	73fb      	strb	r3, [r7, #15]
          break;
 800444a:	e005      	b.n	8004458 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ef      	beq.n	8004438 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	4904      	ldr	r1, [pc, #16]	; (8004478 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	4313      	orrs	r3, r2
 800446a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000

0800447c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e095      	b.n	80045ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449e:	d009      	beq.n	80044b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	61da      	str	r2, [r3, #28]
 80044a6:	e005      	b.n	80044b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fd faa4 	bl	8001a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044f4:	d902      	bls.n	80044fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e002      	b.n	8004502 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004500:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800450a:	d007      	beq.n	800451c <HAL_SPI_Init+0xa0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004514:	d002      	beq.n	800451c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	ea42 0103 	orr.w	r1, r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	f003 0204 	and.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004598:	ea42 0103 	orr.w	r1, r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e040      	b.n	8004656 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fd fa5d 	bl	8001aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2224      	movs	r2, #36	; 0x24
 80045ee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fae1 	bl	8004bd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f826 	bl	8004660 <UART_SetConfig>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e01b      	b.n	8004656 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800462c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800463c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fb60 	bl	8004d14 <UART_CheckIdleState>
 8004654:	4603      	mov	r3, r0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004664:	b08a      	sub	sp, #40	; 0x28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	431a      	orrs	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	4313      	orrs	r3, r2
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4ba4      	ldr	r3, [pc, #656]	; (8004920 <UART_SetConfig+0x2c0>)
 8004690:	4013      	ands	r3, r2
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004698:	430b      	orrs	r3, r1
 800469a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a99      	ldr	r2, [pc, #612]	; (8004924 <UART_SetConfig+0x2c4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	4313      	orrs	r3, r2
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a90      	ldr	r2, [pc, #576]	; (8004928 <UART_SetConfig+0x2c8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d126      	bne.n	8004738 <UART_SetConfig+0xd8>
 80046ea:	4b90      	ldr	r3, [pc, #576]	; (800492c <UART_SetConfig+0x2cc>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d81b      	bhi.n	8004730 <UART_SetConfig+0xd0>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <UART_SetConfig+0xa0>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004711 	.word	0x08004711
 8004704:	08004721 	.word	0x08004721
 8004708:	08004719 	.word	0x08004719
 800470c:	08004729 	.word	0x08004729
 8004710:	2301      	movs	r3, #1
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e116      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004718:	2302      	movs	r3, #2
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e112      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004720:	2304      	movs	r3, #4
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e10e      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004728:	2308      	movs	r3, #8
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472e:	e10a      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004730:	2310      	movs	r3, #16
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e106      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7c      	ldr	r2, [pc, #496]	; (8004930 <UART_SetConfig+0x2d0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d138      	bne.n	80047b4 <UART_SetConfig+0x154>
 8004742:	4b7a      	ldr	r3, [pc, #488]	; (800492c <UART_SetConfig+0x2cc>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b0c      	cmp	r3, #12
 800474e:	d82d      	bhi.n	80047ac <UART_SetConfig+0x14c>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0xf8>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800478d 	.word	0x0800478d
 800475c:	080047ad 	.word	0x080047ad
 8004760:	080047ad 	.word	0x080047ad
 8004764:	080047ad 	.word	0x080047ad
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080047ad 	.word	0x080047ad
 8004770:	080047ad 	.word	0x080047ad
 8004774:	080047ad 	.word	0x080047ad
 8004778:	08004795 	.word	0x08004795
 800477c:	080047ad 	.word	0x080047ad
 8004780:	080047ad 	.word	0x080047ad
 8004784:	080047ad 	.word	0x080047ad
 8004788:	080047a5 	.word	0x080047a5
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e0d8      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004794:	2302      	movs	r3, #2
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e0d4      	b.n	8004946 <UART_SetConfig+0x2e6>
 800479c:	2304      	movs	r3, #4
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e0d0      	b.n	8004946 <UART_SetConfig+0x2e6>
 80047a4:	2308      	movs	r3, #8
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047aa:	e0cc      	b.n	8004946 <UART_SetConfig+0x2e6>
 80047ac:	2310      	movs	r3, #16
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b2:	e0c8      	b.n	8004946 <UART_SetConfig+0x2e6>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5e      	ldr	r2, [pc, #376]	; (8004934 <UART_SetConfig+0x2d4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d125      	bne.n	800480a <UART_SetConfig+0x1aa>
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <UART_SetConfig+0x2cc>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047c8:	2b30      	cmp	r3, #48	; 0x30
 80047ca:	d016      	beq.n	80047fa <UART_SetConfig+0x19a>
 80047cc:	2b30      	cmp	r3, #48	; 0x30
 80047ce:	d818      	bhi.n	8004802 <UART_SetConfig+0x1a2>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d00a      	beq.n	80047ea <UART_SetConfig+0x18a>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d814      	bhi.n	8004802 <UART_SetConfig+0x1a2>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <UART_SetConfig+0x182>
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d008      	beq.n	80047f2 <UART_SetConfig+0x192>
 80047e0:	e00f      	b.n	8004802 <UART_SetConfig+0x1a2>
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e8:	e0ad      	b.n	8004946 <UART_SetConfig+0x2e6>
 80047ea:	2302      	movs	r3, #2
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f0:	e0a9      	b.n	8004946 <UART_SetConfig+0x2e6>
 80047f2:	2304      	movs	r3, #4
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f8:	e0a5      	b.n	8004946 <UART_SetConfig+0x2e6>
 80047fa:	2308      	movs	r3, #8
 80047fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004800:	e0a1      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004802:	2310      	movs	r3, #16
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004808:	e09d      	b.n	8004946 <UART_SetConfig+0x2e6>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <UART_SetConfig+0x2d8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d125      	bne.n	8004860 <UART_SetConfig+0x200>
 8004814:	4b45      	ldr	r3, [pc, #276]	; (800492c <UART_SetConfig+0x2cc>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800481e:	2bc0      	cmp	r3, #192	; 0xc0
 8004820:	d016      	beq.n	8004850 <UART_SetConfig+0x1f0>
 8004822:	2bc0      	cmp	r3, #192	; 0xc0
 8004824:	d818      	bhi.n	8004858 <UART_SetConfig+0x1f8>
 8004826:	2b80      	cmp	r3, #128	; 0x80
 8004828:	d00a      	beq.n	8004840 <UART_SetConfig+0x1e0>
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d814      	bhi.n	8004858 <UART_SetConfig+0x1f8>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <UART_SetConfig+0x1d8>
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d008      	beq.n	8004848 <UART_SetConfig+0x1e8>
 8004836:	e00f      	b.n	8004858 <UART_SetConfig+0x1f8>
 8004838:	2300      	movs	r3, #0
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483e:	e082      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004840:	2302      	movs	r3, #2
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e07e      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004848:	2304      	movs	r3, #4
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e07a      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004850:	2308      	movs	r3, #8
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004856:	e076      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004858:	2310      	movs	r3, #16
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485e:	e072      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a35      	ldr	r2, [pc, #212]	; (800493c <UART_SetConfig+0x2dc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d12a      	bne.n	80048c0 <UART_SetConfig+0x260>
 800486a:	4b30      	ldr	r3, [pc, #192]	; (800492c <UART_SetConfig+0x2cc>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004878:	d01a      	beq.n	80048b0 <UART_SetConfig+0x250>
 800487a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487e:	d81b      	bhi.n	80048b8 <UART_SetConfig+0x258>
 8004880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004884:	d00c      	beq.n	80048a0 <UART_SetConfig+0x240>
 8004886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488a:	d815      	bhi.n	80048b8 <UART_SetConfig+0x258>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <UART_SetConfig+0x238>
 8004890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004894:	d008      	beq.n	80048a8 <UART_SetConfig+0x248>
 8004896:	e00f      	b.n	80048b8 <UART_SetConfig+0x258>
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e052      	b.n	8004946 <UART_SetConfig+0x2e6>
 80048a0:	2302      	movs	r3, #2
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e04e      	b.n	8004946 <UART_SetConfig+0x2e6>
 80048a8:	2304      	movs	r3, #4
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e04a      	b.n	8004946 <UART_SetConfig+0x2e6>
 80048b0:	2308      	movs	r3, #8
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e046      	b.n	8004946 <UART_SetConfig+0x2e6>
 80048b8:	2310      	movs	r3, #16
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e042      	b.n	8004946 <UART_SetConfig+0x2e6>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a17      	ldr	r2, [pc, #92]	; (8004924 <UART_SetConfig+0x2c4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d13a      	bne.n	8004940 <UART_SetConfig+0x2e0>
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <UART_SetConfig+0x2cc>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d8:	d01a      	beq.n	8004910 <UART_SetConfig+0x2b0>
 80048da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048de:	d81b      	bhi.n	8004918 <UART_SetConfig+0x2b8>
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e4:	d00c      	beq.n	8004900 <UART_SetConfig+0x2a0>
 80048e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ea:	d815      	bhi.n	8004918 <UART_SetConfig+0x2b8>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <UART_SetConfig+0x298>
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f4:	d008      	beq.n	8004908 <UART_SetConfig+0x2a8>
 80048f6:	e00f      	b.n	8004918 <UART_SetConfig+0x2b8>
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e022      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004900:	2302      	movs	r3, #2
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e01e      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004908:	2304      	movs	r3, #4
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e01a      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004910:	2308      	movs	r3, #8
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e016      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004918:	2310      	movs	r3, #16
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e012      	b.n	8004946 <UART_SetConfig+0x2e6>
 8004920:	efff69f3 	.word	0xefff69f3
 8004924:	40008000 	.word	0x40008000
 8004928:	40013800 	.word	0x40013800
 800492c:	40021000 	.word	0x40021000
 8004930:	40004400 	.word	0x40004400
 8004934:	40004800 	.word	0x40004800
 8004938:	40004c00 	.word	0x40004c00
 800493c:	40005000 	.word	0x40005000
 8004940:	2310      	movs	r3, #16
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a9f      	ldr	r2, [pc, #636]	; (8004bc8 <UART_SetConfig+0x568>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d17a      	bne.n	8004a46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004954:	2b08      	cmp	r3, #8
 8004956:	d824      	bhi.n	80049a2 <UART_SetConfig+0x342>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0x300>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004985 	.word	0x08004985
 8004964:	080049a3 	.word	0x080049a3
 8004968:	0800498d 	.word	0x0800498d
 800496c:	080049a3 	.word	0x080049a3
 8004970:	08004993 	.word	0x08004993
 8004974:	080049a3 	.word	0x080049a3
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049a3 	.word	0x080049a3
 8004980:	0800499b 	.word	0x0800499b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7ff f822 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 8004988:	61f8      	str	r0, [r7, #28]
        break;
 800498a:	e010      	b.n	80049ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800498c:	4b8f      	ldr	r3, [pc, #572]	; (8004bcc <UART_SetConfig+0x56c>)
 800498e:	61fb      	str	r3, [r7, #28]
        break;
 8004990:	e00d      	b.n	80049ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004992:	f7fe ff83 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8004996:	61f8      	str	r0, [r7, #28]
        break;
 8004998:	e009      	b.n	80049ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499e:	61fb      	str	r3, [r7, #28]
        break;
 80049a0:	e005      	b.n	80049ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80fb 	beq.w	8004bac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	4413      	add	r3, r2
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d305      	bcc.n	80049d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d903      	bls.n	80049da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049d8:	e0e8      	b.n	8004bac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2200      	movs	r2, #0
 80049de:	461c      	mov	r4, r3
 80049e0:	4615      	mov	r5, r2
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	022b      	lsls	r3, r5, #8
 80049ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049f0:	0222      	lsls	r2, r4, #8
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	6849      	ldr	r1, [r1, #4]
 80049f6:	0849      	lsrs	r1, r1, #1
 80049f8:	2000      	movs	r0, #0
 80049fa:	4688      	mov	r8, r1
 80049fc:	4681      	mov	r9, r0
 80049fe:	eb12 0a08 	adds.w	sl, r2, r8
 8004a02:	eb43 0b09 	adc.w	fp, r3, r9
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a14:	4650      	mov	r0, sl
 8004a16:	4659      	mov	r1, fp
 8004a18:	f7fb fbd6 	bl	80001c8 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4613      	mov	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2a:	d308      	bcc.n	8004a3e <UART_SetConfig+0x3de>
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a32:	d204      	bcs.n	8004a3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	e0b6      	b.n	8004bac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a44:	e0b2      	b.n	8004bac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4e:	d15e      	bne.n	8004b0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d828      	bhi.n	8004aaa <UART_SetConfig+0x44a>
 8004a58:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <UART_SetConfig+0x400>)
 8004a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5e:	bf00      	nop
 8004a60:	08004a85 	.word	0x08004a85
 8004a64:	08004a8d 	.word	0x08004a8d
 8004a68:	08004a95 	.word	0x08004a95
 8004a6c:	08004aab 	.word	0x08004aab
 8004a70:	08004a9b 	.word	0x08004a9b
 8004a74:	08004aab 	.word	0x08004aab
 8004a78:	08004aab 	.word	0x08004aab
 8004a7c:	08004aab 	.word	0x08004aab
 8004a80:	08004aa3 	.word	0x08004aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a84:	f7fe ffa2 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 8004a88:	61f8      	str	r0, [r7, #28]
        break;
 8004a8a:	e014      	b.n	8004ab6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a8c:	f7fe ffb4 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8004a90:	61f8      	str	r0, [r7, #28]
        break;
 8004a92:	e010      	b.n	8004ab6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a94:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <UART_SetConfig+0x56c>)
 8004a96:	61fb      	str	r3, [r7, #28]
        break;
 8004a98:	e00d      	b.n	8004ab6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9a:	f7fe feff 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8004a9e:	61f8      	str	r0, [r7, #28]
        break;
 8004aa0:	e009      	b.n	8004ab6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa6:	61fb      	str	r3, [r7, #28]
        break;
 8004aa8:	e005      	b.n	8004ab6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d077      	beq.n	8004bac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005a      	lsls	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	441a      	add	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b0f      	cmp	r3, #15
 8004ad6:	d916      	bls.n	8004b06 <UART_SetConfig+0x4a6>
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ade:	d212      	bcs.n	8004b06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f023 030f 	bic.w	r3, r3, #15
 8004ae8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	8afb      	ldrh	r3, [r7, #22]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	8afa      	ldrh	r2, [r7, #22]
 8004b02:	60da      	str	r2, [r3, #12]
 8004b04:	e052      	b.n	8004bac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b0c:	e04e      	b.n	8004bac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d827      	bhi.n	8004b66 <UART_SetConfig+0x506>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <UART_SetConfig+0x4bc>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b51 	.word	0x08004b51
 8004b28:	08004b67 	.word	0x08004b67
 8004b2c:	08004b57 	.word	0x08004b57
 8004b30:	08004b67 	.word	0x08004b67
 8004b34:	08004b67 	.word	0x08004b67
 8004b38:	08004b67 	.word	0x08004b67
 8004b3c:	08004b5f 	.word	0x08004b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b40:	f7fe ff44 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 8004b44:	61f8      	str	r0, [r7, #28]
        break;
 8004b46:	e014      	b.n	8004b72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b48:	f7fe ff56 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8004b4c:	61f8      	str	r0, [r7, #28]
        break;
 8004b4e:	e010      	b.n	8004b72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b50:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <UART_SetConfig+0x56c>)
 8004b52:	61fb      	str	r3, [r7, #28]
        break;
 8004b54:	e00d      	b.n	8004b72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b56:	f7fe fea1 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8004b5a:	61f8      	str	r0, [r7, #28]
        break;
 8004b5c:	e009      	b.n	8004b72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b62:	61fb      	str	r3, [r7, #28]
        break;
 8004b64:	e005      	b.n	8004b72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b70:	bf00      	nop
    }

    if (pclk != 0U)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d019      	beq.n	8004bac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	085a      	lsrs	r2, r3, #1
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	441a      	add	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	d909      	bls.n	8004ba6 <UART_SetConfig+0x546>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b98:	d205      	bcs.n	8004ba6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60da      	str	r2, [r3, #12]
 8004ba4:	e002      	b.n	8004bac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40008000 	.word	0x40008000
 8004bcc:	00f42400 	.word	0x00f42400

08004bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01a      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cce:	d10a      	bne.n	8004ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b098      	sub	sp, #96	; 0x60
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d24:	f7fd f958 	bl	8001fd8 <HAL_GetTick>
 8004d28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d12e      	bne.n	8004d96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d40:	2200      	movs	r2, #0
 8004d42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f88c 	bl	8004e64 <UART_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d021      	beq.n	8004d96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d66:	653b      	str	r3, [r7, #80]	; 0x50
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d70:	647b      	str	r3, [r7, #68]	; 0x44
 8004d72:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e062      	b.n	8004e5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d149      	bne.n	8004e38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f856 	bl	8004e64 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d03c      	beq.n	8004e38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	623b      	str	r3, [r7, #32]
   return(result);
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dde:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e6      	bne.n	8004dbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e10:	61fa      	str	r2, [r7, #28]
 8004e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e011      	b.n	8004e5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3758      	adds	r7, #88	; 0x58
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e74:	e049      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d045      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7e:	f7fd f8ab 	bl	8001fd8 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d302      	bcc.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e048      	b.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d031      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d110      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f838 	bl	8004f32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e029      	b.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee4:	d111      	bne.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f81e 	bl	8004f32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e00f      	b.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4013      	ands	r3, r2
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	bf0c      	ite	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	2300      	movne	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d0a6      	beq.n	8004e76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b095      	sub	sp, #84	; 0x54
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	643b      	str	r3, [r7, #64]	; 0x40
 8004f5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e6      	bne.n	8004f3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d118      	bne.n	8004fda <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f023 0310 	bic.w	r3, r3, #16
 8004fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6979      	ldr	r1, [r7, #20]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e6      	bne.n	8004fa8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fee:	bf00      	nop
 8004ff0:	3754      	adds	r7, #84	; 0x54
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <LL_EXTI_EnableIT_0_31>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <LL_EXTI_EnableIT_0_31+0x20>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4904      	ldr	r1, [pc, #16]	; (800501c <LL_EXTI_EnableIT_0_31+0x20>)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4313      	orrs	r3, r2
 800500e:	600b      	str	r3, [r1, #0]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	40010400 	.word	0x40010400

08005020 <LL_EXTI_EnableIT_32_63>:
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <LL_EXTI_EnableIT_32_63+0x20>)
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	4904      	ldr	r1, [pc, #16]	; (8005040 <LL_EXTI_EnableIT_32_63+0x20>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4313      	orrs	r3, r2
 8005032:	620b      	str	r3, [r1, #32]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40010400 	.word	0x40010400

08005044 <LL_EXTI_DisableIT_0_31>:
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <LL_EXTI_DisableIT_0_31+0x24>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	43db      	mvns	r3, r3
 8005054:	4904      	ldr	r1, [pc, #16]	; (8005068 <LL_EXTI_DisableIT_0_31+0x24>)
 8005056:	4013      	ands	r3, r2
 8005058:	600b      	str	r3, [r1, #0]
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010400 	.word	0x40010400

0800506c <LL_EXTI_DisableIT_32_63>:
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <LL_EXTI_DisableIT_32_63+0x24>)
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	43db      	mvns	r3, r3
 800507c:	4904      	ldr	r1, [pc, #16]	; (8005090 <LL_EXTI_DisableIT_32_63+0x24>)
 800507e:	4013      	ands	r3, r2
 8005080:	620b      	str	r3, [r1, #32]
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40010400 	.word	0x40010400

08005094 <LL_EXTI_EnableEvent_0_31>:
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	4904      	ldr	r1, [pc, #16]	; (80050b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	604b      	str	r3, [r1, #4]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40010400 	.word	0x40010400

080050b8 <LL_EXTI_EnableEvent_32_63>:
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80050c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c4:	4904      	ldr	r1, [pc, #16]	; (80050d8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	624b      	str	r3, [r1, #36]	; 0x24
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40010400 	.word	0x40010400

080050dc <LL_EXTI_DisableEvent_0_31>:
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <LL_EXTI_DisableEvent_0_31+0x24>)
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	4904      	ldr	r1, [pc, #16]	; (8005100 <LL_EXTI_DisableEvent_0_31+0x24>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	604b      	str	r3, [r1, #4]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010400 	.word	0x40010400

08005104 <LL_EXTI_DisableEvent_32_63>:
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <LL_EXTI_DisableEvent_32_63+0x24>)
 800510e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	43db      	mvns	r3, r3
 8005114:	4904      	ldr	r1, [pc, #16]	; (8005128 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005116:	4013      	ands	r3, r2
 8005118:	624b      	str	r3, [r1, #36]	; 0x24
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010400 	.word	0x40010400

0800512c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	4904      	ldr	r1, [pc, #16]	; (800514c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40010400 	.word	0x40010400

08005150 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800515a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515c:	4904      	ldr	r1, [pc, #16]	; (8005170 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4313      	orrs	r3, r2
 8005162:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40010400 	.word	0x40010400

08005174 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	43db      	mvns	r3, r3
 8005184:	4904      	ldr	r1, [pc, #16]	; (8005198 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005186:	4013      	ands	r3, r2
 8005188:	608b      	str	r3, [r1, #8]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010400 	.word	0x40010400

0800519c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80051a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	4904      	ldr	r1, [pc, #16]	; (80051c0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	628b      	str	r3, [r1, #40]	; 0x28
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010400 	.word	0x40010400

080051c4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4904      	ldr	r1, [pc, #16]	; (80051e4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60cb      	str	r3, [r1, #12]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40010400 	.word	0x40010400

080051e8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80051f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f4:	4904      	ldr	r1, [pc, #16]	; (8005208 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40010400 	.word	0x40010400

0800520c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	43db      	mvns	r3, r3
 800521c:	4904      	ldr	r1, [pc, #16]	; (8005230 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800521e:	4013      	ands	r3, r2
 8005220:	60cb      	str	r3, [r1, #12]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010400 	.word	0x40010400

08005234 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800523e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	43db      	mvns	r3, r3
 8005244:	4904      	ldr	r1, [pc, #16]	; (8005258 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005246:	4013      	ands	r3, r2
 8005248:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010400 	.word	0x40010400

0800525c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	7a1b      	ldrb	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80d0 	beq.w	8005412 <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d063      	beq.n	8005342 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	7a5b      	ldrb	r3, [r3, #9]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d01c      	beq.n	80052bc <LL_EXTI_Init+0x60>
 8005282:	2b02      	cmp	r3, #2
 8005284:	dc25      	bgt.n	80052d2 <LL_EXTI_Init+0x76>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <LL_EXTI_Init+0x34>
 800528a:	2b01      	cmp	r3, #1
 800528c:	d00b      	beq.n	80052a6 <LL_EXTI_Init+0x4a>
 800528e:	e020      	b.n	80052d2 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff ff21 	bl	80050dc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff feac 	bl	8004ffc <LL_EXTI_EnableIT_0_31>
          break;
 80052a4:	e018      	b.n	80052d8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff feca 	bl	8005044 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff feed 	bl	8005094 <LL_EXTI_EnableEvent_0_31>
          break;
 80052ba:	e00d      	b.n	80052d8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fe9b 	bl	8004ffc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fee2 	bl	8005094 <LL_EXTI_EnableEvent_0_31>
          break;
 80052d0:	e002      	b.n	80052d8 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80052d2:	2301      	movs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
          break;
 80052d6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	7a9b      	ldrb	r3, [r3, #10]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d030      	beq.n	8005342 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7a9b      	ldrb	r3, [r3, #10]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d01c      	beq.n	8005322 <LL_EXTI_Init+0xc6>
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	dc25      	bgt.n	8005338 <LL_EXTI_Init+0xdc>
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d002      	beq.n	80052f6 <LL_EXTI_Init+0x9a>
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d00b      	beq.n	800530c <LL_EXTI_Init+0xb0>
 80052f4:	e020      	b.n	8005338 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff ff86 	bl	800520c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff11 	bl	800512c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800530a:	e01a      	b.n	8005342 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ff2f 	bl	8005174 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ff52 	bl	80051c4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005320:	e00f      	b.n	8005342 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff ff00 	bl	800512c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff ff47 	bl	80051c4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005336:	e004      	b.n	8005342 <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f043 0302 	orr.w	r3, r3, #2
 800533e:	60fb      	str	r3, [r7, #12]
            break;
 8005340:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d077      	beq.n	800543a <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7a5b      	ldrb	r3, [r3, #9]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d01c      	beq.n	800538c <LL_EXTI_Init+0x130>
 8005352:	2b02      	cmp	r3, #2
 8005354:	dc25      	bgt.n	80053a2 <LL_EXTI_Init+0x146>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <LL_EXTI_Init+0x104>
 800535a:	2b01      	cmp	r3, #1
 800535c:	d00b      	beq.n	8005376 <LL_EXTI_Init+0x11a>
 800535e:	e020      	b.n	80053a2 <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fecd 	bl	8005104 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fe56 	bl	8005020 <LL_EXTI_EnableIT_32_63>
          break;
 8005374:	e01a      	b.n	80053ac <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fe76 	bl	800506c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fe97 	bl	80050b8 <LL_EXTI_EnableEvent_32_63>
          break;
 800538a:	e00f      	b.n	80053ac <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fe45 	bl	8005020 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff fe8c 	bl	80050b8 <LL_EXTI_EnableEvent_32_63>
          break;
 80053a0:	e004      	b.n	80053ac <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f043 0304 	orr.w	r3, r3, #4
 80053a8:	60fb      	str	r3, [r7, #12]
          break;
 80053aa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	7a9b      	ldrb	r3, [r3, #10]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d042      	beq.n	800543a <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	7a9b      	ldrb	r3, [r3, #10]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d01c      	beq.n	80053f6 <LL_EXTI_Init+0x19a>
 80053bc:	2b03      	cmp	r3, #3
 80053be:	dc25      	bgt.n	800540c <LL_EXTI_Init+0x1b0>
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d002      	beq.n	80053ca <LL_EXTI_Init+0x16e>
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d00b      	beq.n	80053e0 <LL_EXTI_Init+0x184>
 80053c8:	e020      	b.n	800540c <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff ff30 	bl	8005234 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff feb9 	bl	8005150 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80053de:	e02c      	b.n	800543a <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fed9 	bl	800519c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fefa 	bl	80051e8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80053f4:	e021      	b.n	800543a <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fea8 	bl	8005150 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff feef 	bl	80051e8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800540a:	e016      	b.n	800543a <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
            break;
 8005410:	e013      	b.n	800543a <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fe14 	bl	8005044 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fe5b 	bl	80050dc <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fe1e 	bl	800506c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fe65 	bl	8005104 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 800543a:	68fb      	ldr	r3, [r7, #12]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <LL_GPIO_SetPinMode>:
{
 8005444:	b480      	push	{r7}
 8005446:	b08b      	sub	sp, #44	; 0x2c
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	613b      	str	r3, [r7, #16]
  return result;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800546a:	2320      	movs	r3, #32
 800546c:	e003      	b.n	8005476 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	fab3 f383 	clz	r3, r3
 8005474:	b2db      	uxtb	r3, r3
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	2103      	movs	r1, #3
 800547a:	fa01 f303 	lsl.w	r3, r1, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	401a      	ands	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	fa93 f3a3 	rbit	r3, r3
 800548c:	61fb      	str	r3, [r7, #28]
  return result;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005498:	2320      	movs	r3, #32
 800549a:	e003      	b.n	80054a4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	fab3 f383 	clz	r3, r3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	372c      	adds	r7, #44	; 0x2c
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <LL_GPIO_SetPinOutputType>:
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	605a      	str	r2, [r3, #4]
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <LL_GPIO_SetPinSpeed>:
{
 80054ee:	b480      	push	{r7}
 80054f0:	b08b      	sub	sp, #44	; 0x2c
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	613b      	str	r3, [r7, #16]
  return result;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005514:	2320      	movs	r3, #32
 8005516:	e003      	b.n	8005520 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	2103      	movs	r1, #3
 8005524:	fa01 f303 	lsl.w	r3, r1, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	401a      	ands	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	fa93 f3a3 	rbit	r3, r3
 8005536:	61fb      	str	r3, [r7, #28]
  return result;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005542:	2320      	movs	r3, #32
 8005544:	e003      	b.n	800554e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	fab3 f383 	clz	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	431a      	orrs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	609a      	str	r2, [r3, #8]
}
 800555c:	bf00      	nop
 800555e:	372c      	adds	r7, #44	; 0x2c
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <LL_GPIO_SetPinPull>:
{
 8005568:	b480      	push	{r7}
 800556a:	b08b      	sub	sp, #44	; 0x2c
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	fa93 f3a3 	rbit	r3, r3
 8005582:	613b      	str	r3, [r7, #16]
  return result;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800558e:	2320      	movs	r3, #32
 8005590:	e003      	b.n	800559a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	fab3 f383 	clz	r3, r3
 8005598:	b2db      	uxtb	r3, r3
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	2103      	movs	r1, #3
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	401a      	ands	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	fa93 f3a3 	rbit	r3, r3
 80055b0:	61fb      	str	r3, [r7, #28]
  return result;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80055bc:	2320      	movs	r3, #32
 80055be:	e003      	b.n	80055c8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	fab3 f383 	clz	r3, r3
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	fa01 f303 	lsl.w	r3, r1, r3
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	60da      	str	r2, [r3, #12]
}
 80055d6:	bf00      	nop
 80055d8:	372c      	adds	r7, #44	; 0x2c
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <LL_GPIO_SetAFPin_0_7>:
{
 80055e2:	b480      	push	{r7}
 80055e4:	b08b      	sub	sp, #44	; 0x2c
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	fa93 f3a3 	rbit	r3, r3
 80055fc:	613b      	str	r3, [r7, #16]
  return result;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005608:	2320      	movs	r3, #32
 800560a:	e003      	b.n	8005614 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	fab3 f383 	clz	r3, r3
 8005612:	b2db      	uxtb	r3, r3
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	210f      	movs	r1, #15
 8005618:	fa01 f303 	lsl.w	r3, r1, r3
 800561c:	43db      	mvns	r3, r3
 800561e:	401a      	ands	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	fa93 f3a3 	rbit	r3, r3
 800562a:	61fb      	str	r3, [r7, #28]
  return result;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005636:	2320      	movs	r3, #32
 8005638:	e003      	b.n	8005642 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	431a      	orrs	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	372c      	adds	r7, #44	; 0x2c
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <LL_GPIO_SetAFPin_8_15>:
{
 800565c:	b480      	push	{r7}
 800565e:	b08b      	sub	sp, #44	; 0x2c
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	fa93 f3a3 	rbit	r3, r3
 8005678:	613b      	str	r3, [r7, #16]
  return result;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005684:	2320      	movs	r3, #32
 8005686:	e003      	b.n	8005690 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	fab3 f383 	clz	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	210f      	movs	r1, #15
 8005694:	fa01 f303 	lsl.w	r3, r1, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	401a      	ands	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	0a1b      	lsrs	r3, r3, #8
 80056a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	fa93 f3a3 	rbit	r3, r3
 80056a8:	61fb      	str	r3, [r7, #28]
  return result;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80056b4:	2320      	movs	r3, #32
 80056b6:	e003      	b.n	80056c0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	fab3 f383 	clz	r3, r3
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	fa01 f303 	lsl.w	r3, r1, r3
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80056ce:	bf00      	nop
 80056d0:	372c      	adds	r7, #44	; 0x2c
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b088      	sub	sp, #32
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	fa93 f3a3 	rbit	r3, r3
 80056f0:	60fb      	str	r3, [r7, #12]
  return result;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <LL_GPIO_Init+0x26>
    return 32U;
 80056fc:	2320      	movs	r3, #32
 80056fe:	e003      	b.n	8005708 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	fab3 f383 	clz	r3, r3
 8005706:	b2db      	uxtb	r3, r3
 8005708:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800570a:	e048      	b.n	800579e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	2101      	movs	r1, #1
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d03a      	beq.n	8005798 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d003      	beq.n	8005732 <LL_GPIO_Init+0x58>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d10e      	bne.n	8005750 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	461a      	mov	r2, r3
 8005738:	69b9      	ldr	r1, [r7, #24]
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fed7 	bl	80054ee <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	461a      	mov	r2, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff feb7 	bl	80054be <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	461a      	mov	r2, r3
 8005756:	69b9      	ldr	r1, [r7, #24]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff ff05 	bl	8005568 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d111      	bne.n	800578a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2bff      	cmp	r3, #255	; 0xff
 800576a:	d807      	bhi.n	800577c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	461a      	mov	r2, r3
 8005772:	69b9      	ldr	r1, [r7, #24]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff34 	bl	80055e2 <LL_GPIO_SetAFPin_0_7>
 800577a:	e006      	b.n	800578a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	461a      	mov	r2, r3
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ff69 	bl	800565c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	461a      	mov	r2, r3
 8005790:	69b9      	ldr	r1, [r7, #24]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fe56 	bl	8005444 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1af      	bne.n	800570c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b6:	b084      	sub	sp, #16
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	f107 001c 	add.w	r0, r7, #28
 80057c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fa65 	bl	8005ca4 <USB_CoreReset>
 80057da:	4603      	mov	r3, r0
 80057dc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80057de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
 80057f0:	e005      	b.n	80057fe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800580a:	b004      	add	sp, #16
 800580c:	4770      	bx	lr

0800580e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f023 0201 	bic.w	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d115      	bne.n	800587e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800585e:	2001      	movs	r0, #1
 8005860:	f7fc fbc6 	bl	8001ff0 <HAL_Delay>
      ms++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa0c 	bl	8005c88 <USB_GetMode>
 8005870:	4603      	mov	r3, r0
 8005872:	2b01      	cmp	r3, #1
 8005874:	d01e      	beq.n	80058b4 <USB_SetCurrentMode+0x84>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b31      	cmp	r3, #49	; 0x31
 800587a:	d9f0      	bls.n	800585e <USB_SetCurrentMode+0x2e>
 800587c:	e01a      	b.n	80058b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d115      	bne.n	80058b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005890:	2001      	movs	r0, #1
 8005892:	f7fc fbad 	bl	8001ff0 <HAL_Delay>
      ms++;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3301      	adds	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9f3 	bl	8005c88 <USB_GetMode>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <USB_SetCurrentMode+0x84>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b31      	cmp	r3, #49	; 0x31
 80058ac:	d9f0      	bls.n	8005890 <USB_SetCurrentMode+0x60>
 80058ae:	e001      	b.n	80058b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e005      	b.n	80058c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b32      	cmp	r3, #50	; 0x32
 80058b8:	d101      	bne.n	80058be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058c8:	b084      	sub	sp, #16
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b086      	sub	sp, #24
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	e009      	b.n	80058fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3340      	adds	r3, #64	; 0x40
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	2200      	movs	r2, #0
 80058f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3301      	adds	r3, #1
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b0e      	cmp	r3, #14
 8005900:	d9f2      	bls.n	80058e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d11c      	bne.n	8005942 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005916:	f043 0302 	orr.w	r3, r3, #2
 800591a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e005      	b.n	800594e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800595a:	2103      	movs	r1, #3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f959 	bl	8005c14 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005962:	2110      	movs	r1, #16
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8f1 	bl	8005b4c <USB_FlushTxFifo>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f91d 	bl	8005bb4 <USB_FlushRxFifo>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	461a      	mov	r2, r3
 800598c:	2300      	movs	r3, #0
 800598e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	461a      	mov	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	e043      	b.n	8005a36 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c4:	d118      	bne.n	80059f8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	461a      	mov	r2, r3
 80059da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e013      	b.n	8005a0a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	461a      	mov	r2, r3
 80059f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e008      	b.n	8005a0a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	461a      	mov	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	3301      	adds	r3, #1
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3b7      	bcc.n	80059ae <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e043      	b.n	8005acc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a5a:	d118      	bne.n	8005a8e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e013      	b.n	8005aa0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e008      	b.n	8005aa0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3b7      	bcc.n	8005a44 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005af4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f043 0210 	orr.w	r2, r3, #16
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <USB_DevInit+0x280>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f043 0208 	orr.w	r2, r3, #8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d107      	bne.n	8005b36 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b42:	b004      	add	sp, #16
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	803c3800 	.word	0x803c3800

08005b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <USB_FlushTxFifo+0x64>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e01b      	b.n	8005ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	daf2      	bge.n	8005b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	019b      	lsls	r3, r3, #6
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <USB_FlushTxFifo+0x64>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e006      	b.n	8005ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d0f0      	beq.n	8005b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	00030d40 	.word	0x00030d40

08005bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4a11      	ldr	r2, [pc, #68]	; (8005c10 <USB_FlushRxFifo+0x5c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e018      	b.n	8005c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	daf2      	bge.n	8005bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2210      	movs	r2, #16
 8005be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <USB_FlushRxFifo+0x5c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e006      	b.n	8005c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d0f0      	beq.n	8005be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	00030d40 	.word	0x00030d40

08005c14 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c34:	4313      	orrs	r3, r2
 8005c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c60:	f023 0303 	bic.w	r3, r3, #3
 8005c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0301 	and.w	r3, r3, #1
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <USB_CoreReset+0x64>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e01b      	b.n	8005cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	daf2      	bge.n	8005cb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f043 0201 	orr.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <USB_CoreReset+0x64>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d901      	bls.n	8005cec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e006      	b.n	8005cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d0f0      	beq.n	8005cda <USB_CoreReset+0x36>

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	00030d40 	.word	0x00030d40

08005d0c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <LL_mDelay+0x4c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005d1e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d00c      	beq.n	8005d42 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8005d2e:	e008      	b.n	8005d42 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <LL_mDelay+0x4c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f3      	bne.n	8005d30 <LL_mDelay+0x24>
    }
  }
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	e000e010 	.word	0xe000e010

08005d5c <memset>:
 8005d5c:	4402      	add	r2, r0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d100      	bne.n	8005d66 <memset+0xa>
 8005d64:	4770      	bx	lr
 8005d66:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6a:	e7f9      	b.n	8005d60 <memset+0x4>

08005d6c <__libc_init_array>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4d0d      	ldr	r5, [pc, #52]	; (8005da4 <__libc_init_array+0x38>)
 8005d70:	4c0d      	ldr	r4, [pc, #52]	; (8005da8 <__libc_init_array+0x3c>)
 8005d72:	1b64      	subs	r4, r4, r5
 8005d74:	10a4      	asrs	r4, r4, #2
 8005d76:	2600      	movs	r6, #0
 8005d78:	42a6      	cmp	r6, r4
 8005d7a:	d109      	bne.n	8005d90 <__libc_init_array+0x24>
 8005d7c:	4d0b      	ldr	r5, [pc, #44]	; (8005dac <__libc_init_array+0x40>)
 8005d7e:	4c0c      	ldr	r4, [pc, #48]	; (8005db0 <__libc_init_array+0x44>)
 8005d80:	f000 f818 	bl	8005db4 <_init>
 8005d84:	1b64      	subs	r4, r4, r5
 8005d86:	10a4      	asrs	r4, r4, #2
 8005d88:	2600      	movs	r6, #0
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	d105      	bne.n	8005d9a <__libc_init_array+0x2e>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d94:	4798      	blx	r3
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7ee      	b.n	8005d78 <__libc_init_array+0xc>
 8005d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9e:	4798      	blx	r3
 8005da0:	3601      	adds	r6, #1
 8005da2:	e7f2      	b.n	8005d8a <__libc_init_array+0x1e>
 8005da4:	08005e28 	.word	0x08005e28
 8005da8:	08005e28 	.word	0x08005e28
 8005dac:	08005e28 	.word	0x08005e28
 8005db0:	08005e2c 	.word	0x08005e2c

08005db4 <_init>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr

08005dc0 <_fini>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr
